<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>harmonic lemma on MathBugs</title>
    <link>https://st3inum.github.io/tags/harmonic-lemma/</link>
    <description>Recent content in harmonic lemma on MathBugs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 May 2021 16:08:11 +0600</lastBuildDate><atom:link href="https://st3inum.github.io/tags/harmonic-lemma/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Harmonic Lemma : H(n) - UVA 11526</title>
      <link>https://st3inum.github.io/posts/uva-11526/</link>
      <pubDate>Sat, 08 May 2021 16:08:11 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/uva-11526/</guid>
      <description>For a given $n$ , calculate $\sum_{i=1}^{n}{\lfloor \frac{n}{i} \rfloor}$
The main idea of this problem is there are maximum $2\sqrt{n}$ different values of $\lfloor \frac{n}{i} \rfloor$. [This is also known as Harmonic lemma]
[But why?]  click to hide    Case 1: $x\le \sqrt{n}$
 Hence, if we divide $n$ with $1\le i\le x$, number of values of $\lfloor \frac{n}{i} \rfloor$ will be at most $x$ (because if all values were different, even then there will be $x$ values).</description>
      <content>&lt;p&gt;For a given $n$ , calculate $\sum_{i=1}^{n}{\lfloor \frac{n}{i} \rfloor}$&lt;/p&gt;
&lt;p&gt;The main idea of this problem is there are maximum $2\sqrt{n}$ different values of $\lfloor \frac{n}{i} \rfloor$. [This is also known as Harmonic lemma]&lt;/p&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
[But why?]
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Case 1: $x\le \sqrt{n}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hence, if we divide $n$ with $1\le i\le x$, number of values of $\lfloor \frac{n}{i} \rfloor$ will be at most $x$ (because if all values were different, even then there will be $x$ values). Which is equal to $\sqrt{n}$.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Case 2: $x&amp;gt;\sqrt{n}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hence the values of $\lfloor \frac{n}{i} \rfloor$ (where $\sqrt{n} &amp;lt; i \le n$) will be in range $[\frac{n}{n},\frac{n}{\sqrt{n}}] = [1,\sqrt{n}]$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\therefore$ number of values of $\lfloor \frac{n}{i} \rfloor$ will be at most $\sqrt{n}$.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$\therefore$ Number of different values of $\lfloor \frac{n}{i} \rfloor$ is maximum $2\sqrt{n}$.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now, we will only iterate over those unique values of $\lfloor \frac{n}{i} \rfloor$.&lt;/p&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
How can we do it?
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;ul&gt;
&lt;li&gt;Binary search&lt;/li&gt;
&lt;li&gt;Doing some division &amp;hellip;.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;




  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Harmonic Lemma code template&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code2&#34;&gt;

for (int i = 1, j, v; i &amp;lt;= n &amp;amp;&amp;amp; (j = n / (v = (n / i))); i = j &amp;#43; 1) {
	// all value x in range [i,j] will have same value floor(n/x) = v
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;






  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Gift Dilemma&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/uva\/11526.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://onlinejudge.org/external/115/11526.pdf&#34;&gt;UVA - 11526&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/blog/entry/53925&#34;&gt;Harmonic Lemma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;similar-problems&#34;&gt;Similar Problems:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lightoj.com/problem/harmonic-number-ii&#34;&gt;Harmonic Number (II) - Lightoj&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Prime Factor Love - Toph</title>
      <link>https://st3inum.github.io/posts/toph-prime-factor-love/</link>
      <pubDate>Thu, 22 Apr 2021 02:31:20 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/toph-prime-factor-love/</guid>
      <description>Problem Description:   $mod = 1000009$
  $ [p] = \begin{cases} 1 \text{ if $p$ is true} \newline 0 \text{ if $p$ is not true} \end{cases}$
  $f(n) = \sum_{i=2}^{n-1}{[i|n]i}$
  $S(n) = \sum_{i=1}^{n}{f(i)}$ for a given n
  You need to find , sum of all prime factor of S(n)%mod
  Inside Math:   We know , $\sigma_1(n) = \sum_{i=1}^{n}{[i|n]i}$
  $sum(n) = \sum_{i=1}^{n}{i}$</description>
      <content>&lt;h2 id=&#34;problem-description&#34;&gt;Problem Description:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$mod = 1000009$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$ [p] = \begin{cases} 1 \text{ if $p$ is true} \newline 0 \text{ if $p$ is not true} \end{cases}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$f(n) = \sum_{i=2}^{n-1}{[i|n]i}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$S(n) = \sum_{i=1}^{n}{f(i)}$ for a given n&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You need to find , sum of all prime factor of S(n)%mod&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We know , $\sigma_1(n) = \sum_{i=1}^{n}{[i|n]i}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$sum(n) = \sum_{i=1}^{n}{i}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$sum(l,r) = \sum_{i=l}^{r}{i}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let assume , $ssod(n) = \sum_{i=1}^{n}{\sigma_1(i)}$ , ssod = sum of sum-of-divisor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can represent $S(n) = ssod(n) - sum(n) - n + [n&amp;gt;=1]$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now , if we can find $ssod(n)$ faster, we can solve the problem.&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=1}^{n}{\sigma_1(i)}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=1}^{n}{\sum_{j=1}^{i}{[j|i]j}}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=1}^{n}{\sum_{j=1}^{n}{[j|i]j}}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=j}^{n}{j \times \sum_{i=1}^{n}{[j|i]}}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=j}^{n}{j \times \lfloor \frac{n}{j} \rfloor}$&lt;/p&gt;
&lt;p&gt;Now there, might be $O(\sqrt{n})$ different values for $\lfloor \frac{n}{j} \rfloor$ [This is also known as &lt;a href=&#34;https://st3inum.github.io/posts/uva-11526/&#34;&gt;Harmonic lemma&lt;/a&gt;]. We will iterate over all such values of $\lfloor \frac{n}{j} \rfloor$ , and sum up there contribution. Thus we can calculate values for $ssod(n)$ in $O(\sqrt{n})$ and then for $S(n)$.&lt;/p&gt;
&lt;p&gt;For the second part , we will maintain a sieve for values $[0,mod)$ and precalculate sum of prime factor of all the number in the range.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/toph\/prime-factor-love.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;spoj---afs2&#34;&gt;SPOJ - AFS2&lt;/h2&gt;
&lt;p&gt;Pretty much same problem.



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;AFS2&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code2&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/spoj\/AFS2.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code2&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;

&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://toph.co/p/prime-factor-love&#34;&gt;Toph - Prime Factor Love&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.spoj.com/problems/AFS2/en/&#34;&gt;SPOJ - AFS2 - Amazing Factor Sequence (medium)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/blog/entry/53925&#34;&gt;Harmonic Lemma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
