<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>codechef on MathBugs</title>
    <link>https://st3inum.github.io/tags/codechef/</link>
    <description>Recent content in codechef on MathBugs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 30 Apr 2021 22:03:31 +0600</lastBuildDate><atom:link href="https://st3inum.github.io/tags/codechef/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Long Sandwich - Codechef SANDWICH</title>
      <link>https://st3inum.github.io/posts/codechef-sandwich/</link>
      <pubDate>Fri, 30 Apr 2021 22:03:31 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/codechef-sandwich/</guid>
      <description>It has two parts to this problem. You are given $n$ and $k$. You have to tell the minimum number of pieces, $a$, you can cut a sandwich of length $n$ such that the length of no piece is greater than $k$.
The answer is quite simple, isn&amp;rsquo;t it ?
Answer of the first part  click to hide  $a = \lceil \frac{n}{k} \rceil$    The second part is, how many ways we can cut the sandwich into $a$ pieces such that the length of no piece is greater than $k$.</description>
      <content>&lt;p&gt;It has two parts to this problem. You are given $n$ and $k$. You have to tell the minimum number of pieces, $a$, you can cut a sandwich of length $n$ such that the length of no piece is greater than $k$.&lt;/p&gt;
&lt;p&gt;The answer is quite simple, isn&amp;rsquo;t it ?&lt;/p&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
Answer of the first part
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
$a = \lceil \frac{n}{k} \rceil$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The second part is, how many ways we can cut the sandwich into $a$ pieces such that the length of no piece is greater than $k$. You have print the answer under modulo $m$, for a given $m$.&lt;/p&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
Hint for the second part
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;code&gt;Stars and Bars Theorem&lt;/code&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;p&gt;Suppose, we have exactly $ak$ length of sandwich. How many ways are there to cut the sandwich ? Answer : 1.&lt;/p&gt;
&lt;p&gt;Now, we have some $extra = ak-n$ length of sandwich , which we have to subtract.&lt;/p&gt;
&lt;p&gt;Now, the problem turns into: &lt;strong&gt;how many ways we can cut a sandwich of length, $extra$, into $a$ pieces.&lt;/strong&gt; [Because if in one way we can cut $p$ length of sandwich for the $i$&amp;lsquo;th piece, we can actually subtract $p$ from the $i$&amp;lsquo;th piece in the previous solution].&lt;/p&gt;
&lt;p&gt;Hence, our solution is $\binom{extra + a - 1}{a - 1}$ [Directly from stars and bars theorem].&lt;/p&gt;
&lt;h2 id=&#34;subtask-1&#34;&gt;Subtask 1:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$1\le n,k \le 50$&lt;/li&gt;
&lt;li&gt;$2 \le m \le 10^{6}$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can directly calculate our solution with dp.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Long Sandwich: subtask 1&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codechef\/SANDWICH_1.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;subtask-3&#34;&gt;Subtask 3:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$1\le n,k \le 10^{18}$&lt;/li&gt;
&lt;li&gt;$2 \le m \le 10^{6}$ and $m$ is a prime number.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this case we can calculate the value of $\binom{n}{r}$ with lucas theorem.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;3&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;3&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Long Sandwich: subtask 3&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code3&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codechef\/SANDWICH_3.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code3&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;subtask-4&#34;&gt;Subtask 4:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$1\le n,k \le 10^{18}$&lt;/li&gt;
&lt;li&gt;$2 \le m \le 10^{6}$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this case, at first, we will calculate $\binom{n}{r}$ modulo prime power. Then merge them up with &lt;code&gt;CRT&lt;/code&gt; and get the value of $\binom{n}{r}$ modulo an arbitrary number.&lt;/p&gt;
&lt;p&gt;To calculate $\binom{n}{r}$ (mod $p^{k}$) [$p$ is a prime number and $k&amp;gt;0$], we will calculate $n!$ (mod $p^{k}$) , but ignoring all occurrences of $p$.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s define some function/variables.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$F_{n} = \prod_{i = 1 , p\nmid i}^{n}{i}$ (mod $p^{k}$)&lt;/li&gt;
&lt;li&gt;$L(n) = $ max $k$ such that $p^k \mid n!$ [with Legendre&amp;rsquo;s Formula]&lt;/li&gt;
&lt;li&gt;$f(n)$ = $\frac{n!}{p^{L(n)}}$ (mod $p^{k}$)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;calculate-ln&#34;&gt;Calculate $L(n)$:&lt;/h3&gt;
&lt;p&gt;$L(n) = \sum_{i=1}^{\infty}{\lfloor \frac{n}{p^{i}} \rfloor}$ [known as Legendre&amp;rsquo;s Formula]&lt;/p&gt;
&lt;h3 id=&#34;calculate-fn&#34;&gt;Calculate $f(n)$:&lt;/h3&gt;
&lt;p&gt;$ f(n) = \begin{cases} 1 \text{ , if $n=0$} \newline F_{p^{e}}^{\lfloor \frac{n}{p^e} \rfloor} \times F_{n \text{ (mod $p^e$)}} \times f(\lfloor \frac{n}{p} \rfloor) \text{ , if $n \neq 0$} \end{cases}$&lt;/p&gt;
&lt;h3 id=&#34;calculate-binomnr&#34;&gt;Calculate $\binom{n}{r}$:&lt;/h3&gt;
&lt;p&gt;$\binom{n}{r} = \frac{f(n)}{f(r)\times f(n-r)} \times p^{L(n)-L(r)-L(n-r)}$&lt;/p&gt;
&lt;p&gt;Now, the remaining part is to merge all answer from $p^k$ [$p^k\mid m$ and $p^{k+1}\nmid m$] with &lt;code&gt;CRT&lt;/code&gt; .&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;4&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;4&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Long Sandwich: subtask 4&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code4&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codechef\/SANDWICH_4.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code4&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.codechef.com/problems/SANDWICH&#34;&gt;Codechef - SANDWICH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forthright48.com/stars-and-bars-theorem&#34;&gt;Stars and Bars Theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forthright48.com/chinese-remainder-theorem-part-1-coprime-moduli/&#34;&gt;CRT - Chinese Remainder Theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brilliant.org/wiki/lucas-theorem/&#34;&gt;Lucas&amp;rsquo; Theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Legendre%27s_formula&#34;&gt;Legendre&amp;rsquo;s Formula&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cp-algorithms.com/combinatorics/binomial-coefficients.html&#34;&gt;Emaxx : Binomial Coefficients&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
