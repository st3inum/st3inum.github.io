<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>toph on MathBugs</title>
    <link>https://st3inum.github.io/tags/toph/</link>
    <description>Recent content in toph on MathBugs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 May 2021 14:57:26 +0600</lastBuildDate><atom:link href="https://st3inum.github.io/tags/toph/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Modulo - Toph</title>
      <link>https://st3inum.github.io/posts/toph-modulo/</link>
      <pubDate>Sat, 08 May 2021 14:57:26 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/toph-modulo/</guid>
      <description>You will be given an array, $A$ of length $n\le 10^{5}$ and $q\le 10^{5}$ queries. In each query you will be given a value $x \le 2^{60}$. You have to perform $A_{i} = A_{i} \text{ (mod $x$)} , 1 \le i \le n$ for each query , and after all the query print the array.
Solution: When $A_{i} = A_{i} \text{ (mod $x$)}$ operation change $A_{i}$ ?
Answer  click to hide  When $A_{i}\ge x$    Lets call a $A_{i}$ valid, for a given $x$, if $A_{i}\ge x$.</description>
      <content>&lt;p&gt;You will be given an array, $A$ of length $n\le 10^{5}$ and $q\le 10^{5}$ queries. In each query you will be given a value $x \le 2^{60}$. You have to perform $A_{i} = A_{i} \text{ (mod $x$)} , 1 \le i \le n$ for each query , and after all the query print the array.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution:&lt;/h2&gt;
&lt;p&gt;When $A_{i} = A_{i} \text{ (mod $x$)}$ operation change $A_{i}$ ?&lt;/p&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
&lt;b&gt;Answer&lt;/b&gt;
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
When $A_{i}\ge x$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Lets call a $A_{i}$ valid, for a given $x$, if $A_{i}\ge x$.&lt;/p&gt;
&lt;p&gt;Hence, our solution is, for each query, we will iterate over only valid numbers, and do &lt;code&gt;%=&lt;/code&gt; operation on them [&lt;code&gt;a%=x&lt;/code&gt;].&lt;/p&gt;
&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;p&gt;But why this solution will work?&lt;/p&gt;
&lt;p&gt;Suppose, $a$ is valid for $x$, and we have done $a&#39;=a \text{ (mod $x$)}$.&lt;/p&gt;
&lt;p&gt;Now, $a&#39;\le \frac{a}{2}$ [But why ?]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Case 1: $x\le \frac{a}{2}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hence, if we divide $a$ with $x$, the remainder will be smaller than $x$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\therefore$ $a&#39;\le x$ or $a&#39;\le \frac{a}{2}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Case 2: $x&amp;gt;\frac{a}{2}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hence the remainder will be $a-x$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\therefore a&#39;=a-x$ or $a&#39;\le\frac{a}{2}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hence, one value, $A_{i}$,  will become a valid value atmost $log_{2}{(2^{60})} = 60$ times.&lt;/p&gt;
&lt;p&gt;Hence if we iterate over only the valid value , number of overall iteration will be $60\times q$.&lt;/p&gt;
&lt;p&gt;But as we are using &lt;code&gt;priority_queue&lt;/code&gt; to maintain our array our total complexity will be $O(qlog(n)log(A_{max}))$&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Modulo&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/toph\/modulo.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://toph.co/p/modulo&#34;&gt;Modulo - Toph&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Complex Tashreef - Toph</title>
      <link>https://st3inum.github.io/posts/toph-complex-tashreef/</link>
      <pubDate>Mon, 26 Apr 2021 01:06:15 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/toph-complex-tashreef/</guid>
      <description>Statement: In this problem you are asked to calculate : $\sum_{i=L}^{R}{\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)} \equiv 0]}}$ , for given $L$ and $R$.
Inside Math: From the lucas&#39; theorem we can state that, $\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)}\equiv 1]} = 2^{f(i)}$ . [$f(i) = \text{ number of one in binary representation of } i$]
Suppose , $S(x) = \sum_{i=0}^{x}{\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)} \equiv 0]}}$ . Hence , our answer will be $S(R)-S(L-1)$</description>
      <content>&lt;h2 id=&#34;statement&#34;&gt;Statement:&lt;/h2&gt;
&lt;p&gt;In this problem you are asked to calculate : $\sum_{i=L}^{R}{\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)} \equiv 0]}}$ , for given $L$ and $R$.&lt;/p&gt;
&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;p&gt;From the lucas&#39; theorem we can state that, $\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)}\equiv 1]} = 2^{f(i)}$ . [$f(i) = \text{ number of one in binary representation of } i$]&lt;/p&gt;
&lt;p&gt;Suppose , $S(x) = \sum_{i=0}^{x}{\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)} \equiv 0]}}$ . Hence , our answer will be $S(R)-S(L-1)$&lt;/p&gt;
&lt;p&gt;Now,
\begin{align}
S(x) &amp;amp; = \sum_{i=0}^{x}{\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)} \equiv 0]}} \newline
&amp;amp; = \sum_{i=0}^{x}{(i+1) - 2^{f(i)}} \newline
&amp;amp; = \sum_{i=0}^{x}{(i+1)} - \sum_{i=0}^{x}{2^{f(i)}} \newline
&amp;amp; = \frac{(i+1)\times (i+2)}{2} - \sum_{i=0}^{x}{2^{f(i)}} \newline
\end{align}&lt;/p&gt;
&lt;p&gt;Now the challenge is to calculate $\sum_{i=0}^{x}{2^{f(i)}}$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to do this ?&lt;/strong&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
&lt;b&gt;Hint&lt;/b&gt;
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;ul&gt;
&lt;li&gt;digit dp&lt;/li&gt;
&lt;li&gt;divide and conquer&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;divide-and-conquer-solution&#34;&gt;Divide and Conquer solution:&lt;/h2&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
&lt;b&gt;Hint for divide and conquer&lt;/b&gt;
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
print the values of $f(0),f(1),f(2),&amp;hellip;f(10)&amp;hellip;$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;With some observation/math/googling we can find out that for any number $2^{k} - 1$ , $S(2^{k}-1) = 3^{k}$&lt;/p&gt;
&lt;p&gt;Again , for any number $x$ , if $i$ is maximum number such that $2^{i}-1 &amp;lt; x$ , then we can write $S(x) = S(2^{i}-1) + 2 \times S(x - 2^i)$&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Complex Tashreef : (Divide and Conquer)&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/toph\/complex-tashreef.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;p&gt;To avoid &lt;strong&gt;TLE&lt;/strong&gt; precalculate all values of $S(2^{i} - 1)$ and return them in function $S(n)$ directly.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://brilliant.org/wiki/lucas-theorem/&#34;&gt;Lucas&#39; Theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oeis.org/A001316&#34;&gt;OEIS A001316&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://toph.co/p/complex-tashreef&#34;&gt;Complex Tashreef - Intra AUST Programming Contest, Spring 2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Prime Factor Love - Toph</title>
      <link>https://st3inum.github.io/posts/toph-prime-factor-love/</link>
      <pubDate>Thu, 22 Apr 2021 02:31:20 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/toph-prime-factor-love/</guid>
      <description>Problem Description:   $mod = 1000009$
  $ [p] = \begin{cases} 1 \text{ if $p$ is true} \newline 0 \text{ if $p$ is not true} \end{cases}$
  $f(n) = \sum_{i=2}^{n-1}{[i|n]i}$
  $S(n) = \sum_{i=1}^{n}{f(i)}$ for a given n
  You need to find , sum of all prime factor of S(n)%mod
  Inside Math:   We know , $\sigma_1(n) = \sum_{i=1}^{n}{[i|n]i}$
  $sum(n) = \sum_{i=1}^{n}{i}$</description>
      <content>&lt;h2 id=&#34;problem-description&#34;&gt;Problem Description:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$mod = 1000009$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$ [p] = \begin{cases} 1 \text{ if $p$ is true} \newline 0 \text{ if $p$ is not true} \end{cases}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$f(n) = \sum_{i=2}^{n-1}{[i|n]i}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$S(n) = \sum_{i=1}^{n}{f(i)}$ for a given n&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You need to find , sum of all prime factor of S(n)%mod&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We know , $\sigma_1(n) = \sum_{i=1}^{n}{[i|n]i}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$sum(n) = \sum_{i=1}^{n}{i}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$sum(l,r) = \sum_{i=l}^{r}{i}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let assume , $ssod(n) = \sum_{i=1}^{n}{\sigma_1(i)}$ , ssod = sum of sum-of-divisor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can represent $S(n) = ssod(n) - sum(n) - n + [n&amp;gt;=1]$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now , if we can find $ssod(n)$ faster, we can solve the problem.&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=1}^{n}{\sigma_1(i)}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=1}^{n}{\sum_{j=1}^{i}{[j|i]j}}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=1}^{n}{\sum_{j=1}^{n}{[j|i]j}}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=j}^{n}{j \times \sum_{i=1}^{n}{[j|i]}}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=j}^{n}{j \times \lfloor \frac{n}{j} \rfloor}$&lt;/p&gt;
&lt;p&gt;Now there, might be $O(\sqrt{n})$ different values for $\lfloor \frac{n}{j} \rfloor$ [This is also known as &lt;a href=&#34;https://st3inum.github.io/posts/uva-11526/&#34;&gt;Harmonic lemma&lt;/a&gt;]. We will iterate over all such values of $\lfloor \frac{n}{j} \rfloor$ , and sum up there contribution. Thus we can calculate values for $ssod(n)$ in $O(\sqrt{n})$ and then for $S(n)$.&lt;/p&gt;
&lt;p&gt;For the second part , we will maintain a sieve for values $[0,mod)$ and precalculate sum of prime factor of all the number in the range.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/toph\/prime-factor-love.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;spoj---afs2&#34;&gt;SPOJ - AFS2&lt;/h2&gt;
&lt;p&gt;Pretty much same problem.



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;AFS2&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code2&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/spoj\/AFS2.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code2&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;

&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://toph.co/p/prime-factor-love&#34;&gt;Toph - Prime Factor Love&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.spoj.com/problems/AFS2/en/&#34;&gt;SPOJ - AFS2 - Amazing Factor Sequence (medium)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/blog/entry/53925&#34;&gt;Harmonic Lemma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
