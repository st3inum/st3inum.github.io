<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>number theory on MathBugs</title>
    <link>https://st3inum.github.io/tags/number-theory/</link>
    <description>Recent content in number theory on MathBugs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Apr 2021 10:03:45 +0600</lastBuildDate><atom:link href="https://st3inum.github.io/tags/number-theory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Divisors - UVA 294</title>
      <link>https://st3inum.github.io/posts/uva-294/</link>
      <pubDate>Thu, 22 Apr 2021 10:03:45 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/uva-294/</guid>
      <description>In this problem we will run a segmented sieve for [l,r]. In sieve we will maintain &amp;ldquo;number of divisor of $n$ which is smaller or equal than $sqrt(n)$&amp;quot;.
For each, $i\in [1,\sqrt{r}]$ we will increase number of divisor of each multiple of $i$ in range $[max(l,i^2),r]$.
After the sieve we will multiply $2$ with each number of divisor, because if $i$ is a divisor of $n$ such that $i&amp;lt;=sqrt(n)$ , we will have another divisor $frac{n,i}&amp;gt;=sqrt(n)$.</description>
      <content>&lt;p&gt;In this problem we will run a segmented sieve for [l,r]. In sieve we will maintain &lt;strong&gt;&amp;ldquo;number of divisor of $n$ which is smaller or equal than $sqrt(n)$&amp;quot;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For each, $i\in [1,\sqrt{r}]$ we will increase number of divisor of each multiple of $i$ in range $[max(l,i^2),r]$.&lt;/p&gt;
&lt;p&gt;After the sieve we will multiply $2$ with each number of divisor, because if $i$ is a divisor of $n$ such that $i&amp;lt;=sqrt(n)$ , we will have another divisor $frac{n,i}&amp;gt;=sqrt(n)$. [if n is a square number , we will subtract $1$ also after multiplication].&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/uva\/294.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://onlinejudge.org/index.php?option=onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=230&#34;&gt;UVA - 294&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Toph - Prime Factor Love</title>
      <link>https://st3inum.github.io/posts/toph-prime-factor-love/</link>
      <pubDate>Thu, 22 Apr 2021 02:31:20 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/toph-prime-factor-love/</guid>
      <description>Problem Description:  $mod = 1000009$ $[p]$ is $1$ if $p$ true , else $0$ $f(n) = \sum_{i=2}^{n-1}{[i|n]i}$ $S(n) = \sum_{i=1}^{n}{f(i)}$ for a given n You need to find , sum of all prime factor of S(n)%mod  Inside Math:  We know , $\sigma_1(n) = \sum_{i=1}^{n}{[i|n]i}$ $sum(n) = \sum_{i=1}^{n}{i}$ $sum(l,r) = \sum_{i=l}^{r}{i}$ Let assume , $ssod(n) = \sum_{i=1}^{n}{\sigma_1(i)}$ , ssod = sum of sum-of-divisor We can represent $S(n) = ssod(n) - sum(n) - n + [n&amp;gt;=1]$  Now , if we can find $ssod(n)$ faster, we can solve the problem.</description>
      <content>&lt;h2 id=&#34;problem-description&#34;&gt;Problem Description:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$mod = 1000009$&lt;/li&gt;
&lt;li&gt;$[p]$ is $1$ if $p$ true , else $0$&lt;/li&gt;
&lt;li&gt;$f(n) = \sum_{i=2}^{n-1}{[i|n]i}$&lt;/li&gt;
&lt;li&gt;$S(n) = \sum_{i=1}^{n}{f(i)}$ for a given n&lt;/li&gt;
&lt;li&gt;You need to find , sum of all prime factor of S(n)%mod&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We know , $\sigma_1(n) = \sum_{i=1}^{n}{[i|n]i}$&lt;/li&gt;
&lt;li&gt;$sum(n) = \sum_{i=1}^{n}{i}$&lt;/li&gt;
&lt;li&gt;$sum(l,r) = \sum_{i=l}^{r}{i}$&lt;/li&gt;
&lt;li&gt;Let assume , $ssod(n) = \sum_{i=1}^{n}{\sigma_1(i)}$ , ssod = sum of sum-of-divisor&lt;/li&gt;
&lt;li&gt;We can represent $S(n) = ssod(n) - sum(n) - n + [n&amp;gt;=1]$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now , if we can find $ssod(n)$ faster, we can solve the problem.&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=1}^{n}{\sigma_1(i)}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=1}^{n}{\sum_{j=1}^{i}{[j|i]j}}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=1}^{n}{\sum_{j=1}^{n}{[j|i]j}}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=j}^{n}{j \times \sum_{i=1}^{n}{[j|i]}}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=j}^{n}{j \times \lfloor \frac{n}{j} \rfloor}$&lt;/p&gt;
&lt;p&gt;Now there, might be $O(\sqrt(n))$ different values for $\lfloor \frac{n}{j} \rfloor$ [This is also known as Harmonic lemma]. We will iterate over all such values of $\lfloor \frac{n}{j} \rfloor$ , and sum up there contribution. Thus we can calculate values for $ssod(n)$ in $O(\sqrt(n))$ and then for $S(n)$.&lt;/p&gt;
&lt;p&gt;For the second part , we will maintain a sieve for values $[0,mod)$ and precalculate sum of prime factor of all the number in the range.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/toph\/prime-factor-love.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://toph.co/p/prime-factor-love&#34;&gt;Toph - Prime Factor Love&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/blog/entry/53925&#34;&gt;Harmonic Lemma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Divisor Set - Codeforces - 1257g</title>
      <link>https://st3inum.github.io/posts/codeforces-1257g/</link>
      <pubDate>Wed, 21 Apr 2021 23:41:52 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/codeforces-1257g/</guid>
      <description> cpp     var xmlHttp = new XMLHttpRequest(); xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codeforces\/1257g.cpp&#39;, false ); xmlHttp.send( null ); var div = document.getElementById(&#39;code1&#39;); div.textContent = &#39;\n&#39;+xmlHttp.responseText;  Reference:  Codeforces - 1257G Codeforces Editorial OEIS A096825  </description>
      <content>


  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codeforces\/1257g.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/contest/1257/problem/G&#34;&gt;Codeforces - 1257G&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/blog/entry/71434&#34;&gt;Codeforces Editorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oeis.org/A096825&#34;&gt;OEIS A096825&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
