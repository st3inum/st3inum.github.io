<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>number theory on MathBugs</title>
    <link>https://st3inum.github.io/tags/number-theory/</link>
    <description>Recent content in number theory on MathBugs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 May 2021 14:57:26 +0600</lastBuildDate><atom:link href="https://st3inum.github.io/tags/number-theory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Modulo - Toph</title>
      <link>https://st3inum.github.io/posts/toph-modulo/</link>
      <pubDate>Sat, 08 May 2021 14:57:26 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/toph-modulo/</guid>
      <description>You will be given an array, $A$ of length $n\le 10^{5}$ and $q\le 10^{5}$ queries. In each query you will be given a value $x \le 2^{60}$. You have to perform $A_{i} = A_{i} \text{ (mod $x$)} , 1 \le i \le n$ for each query , and after all the query print the array.
Solution: When $A_{i} = A_{i} \text{ (mod $x$)}$ operation change $A_{i}$ ?
Answer  click to hide  When $A_{i}\ge x$    Lets call a $A_{i}$ valid, for a given $x$, if $A_{i}\ge x$.</description>
      <content>&lt;p&gt;You will be given an array, $A$ of length $n\le 10^{5}$ and $q\le 10^{5}$ queries. In each query you will be given a value $x \le 2^{60}$. You have to perform $A_{i} = A_{i} \text{ (mod $x$)} , 1 \le i \le n$ for each query , and after all the query print the array.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution:&lt;/h2&gt;
&lt;p&gt;When $A_{i} = A_{i} \text{ (mod $x$)}$ operation change $A_{i}$ ?&lt;/p&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
&lt;b&gt;Answer&lt;/b&gt;
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
When $A_{i}\ge x$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Lets call a $A_{i}$ valid, for a given $x$, if $A_{i}\ge x$.&lt;/p&gt;
&lt;p&gt;Hence, our solution is, for each query, we will iterate over only valid numbers, and do &lt;code&gt;%=&lt;/code&gt; operation on them [&lt;code&gt;a%=x&lt;/code&gt;].&lt;/p&gt;
&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;p&gt;But why this solution will work?&lt;/p&gt;
&lt;p&gt;Suppose, $a$ is valid for $x$, and we have done $a&#39;=a \text{ (mod $x$)}$.&lt;/p&gt;
&lt;p&gt;Now, $a&#39;\le \frac{a}{2}$ [But why ?]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Case 1: $x\le \frac{a}{2}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hence, if we divide $a$ with $x$, the remainder will be smaller than $x$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\therefore$ $a&#39;\le x$ or $a&#39;\le \frac{a}{2}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Case 2: $x&amp;gt;\frac{a}{2}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hence the remainder will be $a-x$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\therefore a&#39;=a-x$ or $a&#39;\le\frac{a}{2}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Modulo&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/toph\/modulo.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://toph.co/p/modulo&#34;&gt;Modulo - Toph&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Gift Dilemma - UVA 12775</title>
      <link>https://st3inum.github.io/posts/uva-12775/</link>
      <pubDate>Fri, 07 May 2021 13:01:54 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/uva-12775/</guid>
      <description>$Ax+By+Cz=P$ , $0\le x,y,z$ and $200 \le \frac{C}{gcd(A,B,C)}$.
For given $A,B,C,P$ find number of triplet $(x,y,z)$.
Solution: \begin{align} 200 &amp;amp;\le \frac{C}{gcd(A,B,C)} \newline C &amp;amp;\ge 200\times gcd(A,B,C) \newline \therefore C &amp;amp;\ge 200 \end{align}
Hence, we will rewrite the eqation as $Ax+By+Cz=P \Longrightarrow Ax+By=P-Cz=P&#39;$
We will iterate over all possible values of $P&#39;$(there will be maximum $\frac{10^{8}}{200}$), and for each value of $P&#39;$ we will find number of pair $(x,y)$ that satisfy $Ax+By=P&#39;$ , and sum them up.</description>
      <content>&lt;p&gt;$Ax+By+Cz=P$ , $0\le x,y,z$ and $200 \le \frac{C}{gcd(A,B,C)}$.&lt;/p&gt;
&lt;p&gt;For given $A,B,C,P$ find number of triplet $(x,y,z)$.&lt;/p&gt;
&lt;h1 id=&#34;solution&#34;&gt;Solution:&lt;/h1&gt;
&lt;p&gt;\begin{align}
200 &amp;amp;\le \frac{C}{gcd(A,B,C)} \newline
C &amp;amp;\ge 200\times gcd(A,B,C) \newline
\therefore C &amp;amp;\ge 200
\end{align}&lt;/p&gt;
&lt;p&gt;Hence, we will rewrite the eqation as $Ax+By+Cz=P \Longrightarrow Ax+By=P-Cz=P&#39;$&lt;/p&gt;
&lt;p&gt;We will iterate over all possible values of $P&#39;$(there will be maximum $\frac{10^{8}}{200}$), and for each value of $P&#39;$ we will find number of pair $(x,y)$ that satisfy $Ax+By=P&#39;$ , and sum them up.&lt;/p&gt;
&lt;p&gt;We can use extended euclid to solve the diophantine equation and solve the modified problem. But in this post we will solve the problem in other way.&lt;/p&gt;
&lt;h1 id=&#34;popovicius-theorem&#34;&gt;Popoviciu&amp;rsquo;s Theorem:&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;[Don&amp;rsquo;t know the name of the theorem actually :p]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$ax+by=c$ and $0\le x,y$ . Find number of pair $(x,y)$ that satisfy the equation.&lt;/p&gt;
&lt;p&gt;The answer is $\frac{c}{ab}-\{\frac{b&amp;rsquo;c}{a}\}-\{\frac{a&amp;rsquo;c}{b}\}+1$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$a\times a&#39; \equiv 1 \text{ (mod $b$)}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$b\times b&#39; \equiv 1 \text{ (mod $a$)}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\{x\} = x-\lfloor x \rfloor$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Gift Dilemma&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/uva\/12775.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://onlinejudge.org/external/130/12775.pdf&#34;&gt;UVA - 12775&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://algo.codemarshal.org/contests/bd-ncpc-2014/problems/F&#34;&gt;Gift Dilemma : DIU NCPC 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brilliant.org/wiki/postage-stamp-problem-chicken-mcnugget-theorem/&#34;&gt;Popoviciu&amp;rsquo;s Theorem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Long Sandwich - Codechef SANDWICH</title>
      <link>https://st3inum.github.io/posts/codechef-sandwich/</link>
      <pubDate>Fri, 30 Apr 2021 22:03:31 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/codechef-sandwich/</guid>
      <description>It has two parts to this problem. You are given $n$ and $k$. You have to tell the minimum number of pieces, $a$, you can cut a sandwich of length $n$ such that the length of no piece is greater than $k$.
The answer is quite simple, isn&amp;rsquo;t it ?
Answer of the first part  click to hide  $a = \lceil \frac{n}{k} \rceil$    The second part is, how many ways we can cut the sandwich into $a$ pieces such that the length of no piece is greater than $k$.</description>
      <content>&lt;p&gt;It has two parts to this problem. You are given $n$ and $k$. You have to tell the minimum number of pieces, $a$, you can cut a sandwich of length $n$ such that the length of no piece is greater than $k$.&lt;/p&gt;
&lt;p&gt;The answer is quite simple, isn&amp;rsquo;t it ?&lt;/p&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
Answer of the first part
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
$a = \lceil \frac{n}{k} \rceil$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The second part is, how many ways we can cut the sandwich into $a$ pieces such that the length of no piece is greater than $k$. You have print the answer under modulo $m$, for a given $m$.&lt;/p&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
Hint for the second part
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;code&gt;Stars and Bars Theorem&lt;/code&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;p&gt;Suppose, we have exactly $ak$ length of sandwich. How many ways are there to cut the sandwich ? Answer : 1.&lt;/p&gt;
&lt;p&gt;Now, we have some $extra = ak-n$ length of sandwich , which we have to subtract.&lt;/p&gt;
&lt;p&gt;Now, the problem turns into: &lt;strong&gt;how many ways we can cut a sandwich of length, $extra$, into $a$ pieces.&lt;/strong&gt; [Because if in one way we can cut $p$ length of sandwich for the $i$&amp;lsquo;th piece, we can actually subtract $p$ from the $i$&amp;lsquo;th piece in the previous solution].&lt;/p&gt;
&lt;p&gt;Hence, our solution is $\binom{extra + a - 1}{a - 1}$ [Directly from stars and bars theorem].&lt;/p&gt;
&lt;h2 id=&#34;subtask-1&#34;&gt;Subtask 1:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$1\le n,k \le 50$&lt;/li&gt;
&lt;li&gt;$2 \le m \le 10^{6}$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can directly calculate our solution with dp.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Long Sandwich: subtask 1&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codechef\/SANDWICH_1.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;subtask-3&#34;&gt;Subtask 3:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$1\le n,k \le 10^{18}$&lt;/li&gt;
&lt;li&gt;$2 \le m \le 10^{6}$ and $m$ is a prime number.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this case we can calculate the value of $\binom{n}{r}$ with lucas theorem.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;3&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;3&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Long Sandwich: subtask 3&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code3&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codechef\/SANDWICH_3.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code3&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;subtask-4&#34;&gt;Subtask 4:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$1\le n,k \le 10^{18}$&lt;/li&gt;
&lt;li&gt;$2 \le m \le 10^{6}$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this case, at first, we will calculate $\binom{n}{r}$ modulo prime power. Then merge them up with &lt;code&gt;CRT&lt;/code&gt; and get the value of $\binom{n}{r}$ modulo an arbitrary number.&lt;/p&gt;
&lt;p&gt;To calculate $\binom{n}{r}$ (mod $p^{k}$) [$p$ is a prime number and $k&amp;gt;0$], we will calculate $n!$ (mod $p^{k}$) , but ignoring all occurrences of $p$.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s define some function/variables.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$F_{n} = \prod_{i = 1 , p\nmid i}^{n}{i}$ (mod $p^{k}$)&lt;/li&gt;
&lt;li&gt;$L(n) = $ max $k$ such that $p^k \mid n!$ [with Legendre&amp;rsquo;s Formula]&lt;/li&gt;
&lt;li&gt;$f(n)$ = $\frac{n!}{p^{L(n)}}$ (mod $p^{k}$)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;calculate-ln&#34;&gt;Calculate $L(n)$:&lt;/h3&gt;
&lt;p&gt;$L(n) = \sum_{i=1}^{\infty}{\lfloor \frac{n}{p^{i}} \rfloor}$ [known as Legendre&amp;rsquo;s Formula]&lt;/p&gt;
&lt;h3 id=&#34;calculate-fn&#34;&gt;Calculate $f(n)$:&lt;/h3&gt;
&lt;p&gt;$ f(n) = \begin{cases} 1 \text{ , if $n=0$} \newline F_{p^{e}}^{\lfloor \frac{n}{p^e} \rfloor} \times F_{n \text{ (mod $p^e$)}} \times f(\lfloor \frac{n}{p} \rfloor) \text{ , if $n \neq 0$} \end{cases}$&lt;/p&gt;
&lt;h3 id=&#34;calculate-binomnr&#34;&gt;Calculate $\binom{n}{r}$:&lt;/h3&gt;
&lt;p&gt;$\binom{n}{r} = \frac{f(n)}{f(r)\times f(n-r)} \times p^{L(n)-L(r)-L(n-r)}$&lt;/p&gt;
&lt;p&gt;Now, the remaining part is to merge all answer from $p^k$ [$p^k\mid m$ and $p^{k+1}\nmid m$] with &lt;code&gt;CRT&lt;/code&gt; .&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;4&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;4&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Long Sandwich: subtask 4&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code4&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codechef\/SANDWICH_4.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code4&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.codechef.com/problems/SANDWICH&#34;&gt;Codechef - SANDWICH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forthright48.com/stars-and-bars-theorem&#34;&gt;Stars and Bars Theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forthright48.com/chinese-remainder-theorem-part-1-coprime-moduli/&#34;&gt;CRT - Chinese Remainder Theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brilliant.org/wiki/lucas-theorem/&#34;&gt;Lucas&amp;rsquo; Theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Legendre%27s_formula&#34;&gt;Legendre&amp;rsquo;s Formula&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cp-algorithms.com/combinatorics/binomial-coefficients.html&#34;&gt;Emaxx : Binomial Coefficients&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Fraction and Sequence - UVA 13041</title>
      <link>https://st3inum.github.io/posts/uva-13041/</link>
      <pubDate>Tue, 27 Apr 2021 19:54:10 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/uva-13041/</guid>
      <description>How many triplet $(a,b,c)$ are there such that $0\le a,b,c \le L$ and $\sum_{x=0}^{\infty}{(ax^{2}+bx+c)\times (\frac{1}{10})^{x+1}} = \frac{p}{q}$ , for given $p,q,L$.
Inside Math: Suppose, $A = \sum_{x=0}^{\infty}{ax^2\times (\frac{1}{10})^{x+1}}$
$B = \sum_{x=0}^{\infty}{bx\times (\frac{1}{10})^{x+1}}$
$C = \sum_{x=0}^{\infty}{c\times (\frac{1}{10})^{x+1}}$
Hence, $\sum_{x=0}^{\infty}{(ax^{2}+bx+c)\times (\frac{1}{10})^{x+1}} = A+B+C$
Now, we know(Actually we don&amp;rsquo;t know this, we have to prove this. We&amp;rsquo;ll try to prove this in some other section) that:
$\sum_{x=0}^{\infty}{x^{2}r^{x+1}} = \frac{r^{2}(r+1)}{(r-1)^{3}} \tag{1}$
$\sum_{x=0}^{\infty}{xr^{x+1}} = \frac{r^{2}}{(r-1)^{2}} \tag{2}$</description>
      <content>&lt;p&gt;How many triplet $(a,b,c)$ are there such that $0\le a,b,c \le L$ and $\sum_{x=0}^{\infty}{(ax^{2}+bx+c)\times (\frac{1}{10})^{x+1}} = \frac{p}{q}$ , for given $p,q,L$.&lt;/p&gt;
&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;p&gt;Suppose,
$A = \sum_{x=0}^{\infty}{ax^2\times (\frac{1}{10})^{x+1}}$&lt;/p&gt;
&lt;p&gt;$B = \sum_{x=0}^{\infty}{bx\times (\frac{1}{10})^{x+1}}$&lt;/p&gt;
&lt;p&gt;$C = \sum_{x=0}^{\infty}{c\times (\frac{1}{10})^{x+1}}$&lt;/p&gt;
&lt;p&gt;Hence, $\sum_{x=0}^{\infty}{(ax^{2}+bx+c)\times (\frac{1}{10})^{x+1}} = A+B+C$&lt;/p&gt;
&lt;p&gt;Now, we know(Actually we don&amp;rsquo;t know this, we have to prove this. We&amp;rsquo;ll try to prove this in some other section) that:&lt;/p&gt;
&lt;p&gt;$\sum_{x=0}^{\infty}{x^{2}r^{x+1}} = \frac{r^{2}(r+1)}{(r-1)^{3}} \tag{1}$&lt;/p&gt;
&lt;p&gt;$\sum_{x=0}^{\infty}{xr^{x+1}} = \frac{r^{2}}{(r-1)^{2}} \tag{2}$&lt;/p&gt;
&lt;p&gt;$\sum_{x=0}^{\infty}{r^{x+1}} = \frac{r}{(r-1)} \tag{3}$&lt;/p&gt;
&lt;p&gt;from the above $(1)$, $(2)$ and $(3)$ we can easily find, $A = \frac{11}{3^{6}}$, $B = \frac{1}{3^{4}}$, $C = \frac{1}{3^{2}}$&lt;/p&gt;
&lt;p&gt;Hence :
\begin{align}
\sum_{x=0}^{\infty}{(ax^{2}+bx+c)\times (\frac{1}{10})^{x+1}} &amp;amp;= A+B+C \newline
\sum_{x=0}^{\infty}{(ax^{2}+bx+c)\times (\frac{1}{10})^{x+1}} &amp;amp;= a\times \frac{11}{3^{6}}+ b\times \frac{1}{3^{4}} + c\times \frac{1}{3^{2}} = \frac{p}{q} \newline
\frac{11a+9b+81c}{3^{6}} &amp;amp;= \frac{p}{q} \newline
11a+9b+81c &amp;amp;= \frac{p\times 3^{6} }{q} \newline
11a+9b &amp;amp;= \frac{p\times 3^{6}}{q} - 81c = r \text{ [Here } q \text{ must be a divisor of }3^6\text{]} \newline
\end{align}&lt;/p&gt;
&lt;p&gt;Now , $11a+9b=r$ is a linear diophantine equation.&lt;/p&gt;
&lt;p&gt;By solving this diophantine equation we will get: $a = 9x-4r$ and $b=5r-11x$ for any integer $x$.&lt;/p&gt;
&lt;p&gt;Now ,
\begin{align}
0\le a \le L \newline
0\le 9x-4r \le L \newline
\frac{4r}{9} \le x \le \frac{L+4r}{9}
\end{align}
Hence , $x \in [\lceil \frac{4r}{9} \rceil , \lfloor \frac{L+4r}{9} \rfloor]$&lt;/p&gt;
&lt;p&gt;Again ,
\begin{align}
0\le b \le L \newline
0\le 5r-11x \le L \newline
\frac{5r-L}{11} \le x \le \frac{5r}{11}
\end{align}
Hence , $x \in [\lceil \frac{5r-L}{11} \rceil , \lfloor \frac{5r}{11} \rfloor]$&lt;/p&gt;
&lt;p&gt;Hence , actual value of $x$ will be in range $[\lceil \frac{4r}{9} \rceil , \lfloor \frac{L+4r}{9} \rfloor] \cap [\lceil \frac{5r-L}{11} \rceil , \lfloor \frac{5r}{11} \rfloor] = [max(\lceil \frac{4r}{9} \rceil , \lceil \frac{5r-L}{11} \rceil) , min(\lfloor \frac{L+4r}{9} \rfloor , \lfloor \frac{5r}{11} \rfloor)]$&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution:&lt;/h2&gt;
&lt;p&gt;Now we will just iterate over $c \in [0,L]$ , then for each $r = \frac{p\times 3^{6}}{q} - 81c$ we will add $max(min(\lfloor \frac{L+4r}{9} \rfloor , \lfloor \frac{5r}{11} \rfloor) - max(\lceil \frac{4r}{9} \rceil , \lceil \frac{5r-L}{11} \rceil)+1, 0)$ to our answer.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Fraction and Sequence&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/uva\/13041.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;p&gt;Actually, it is not a good solution, we can optimize it furthermore. But it will pass the problem.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://onlinejudge.org/external/130/13041.pdf&#34;&gt;UVA - 13041&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://algo.codemarshal.org/contests/sustiupc2015/problems/H&#34;&gt;Fraction and Sequence : SUST IUPC 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Diophantine_equation&#34;&gt;Diophantine Equation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Primes or Palindromes? - Codeforces - 568a</title>
      <link>https://st3inum.github.io/posts/codeforces-568a/</link>
      <pubDate>Tue, 27 Apr 2021 01:46:42 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/codeforces-568a/</guid>
      <description>$\pi(n) = \text{ number of prime number smaller than or equal to n}$ . $rub(n) = \text{ number of palindromic number smaller than or equal to n}$ .  For a given $p$ and $q$ find maximum such $n$ so that, $\pi(n)\le \frac{p}{q}\times rub(n)$
Inside Math:  $\pi(n) \approx \frac{n}{ln(n)}$ [Prime number approximation] $rub(n) \approx 2\sqrt{n}$ maximum value of $\frac{p}{q} = 42$  Hence , \begin{align} \pi(n) &amp;amp;\le \frac{p}{q}\times rub(n) \newline \Longrightarrow \frac{n}{ln(n)} &amp;amp;\le 42 \times 2\sqrt{n} \newline \Longrightarrow \frac{\sqrt{n}}{ln(n)} &amp;amp;\le 84 \newline \Longrightarrow n_{max} &amp;amp;\approx \boxed{1415344} \newline \end{align}</description>
      <content>&lt;ul&gt;
&lt;li&gt;$\pi(n) = \text{ number of prime number smaller than or equal to n}$ .&lt;/li&gt;
&lt;li&gt;$rub(n) = \text{ number of palindromic number smaller than or equal to n}$ .&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a given $p$ and $q$ find maximum such $n$ so that, $\pi(n)\le \frac{p}{q}\times rub(n)$&lt;/p&gt;
&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$\pi(n) \approx \frac{n}{ln(n)}$ [Prime number approximation]&lt;/li&gt;
&lt;li&gt;$rub(n) \approx 2\sqrt{n}$&lt;/li&gt;
&lt;li&gt;maximum value of $\frac{p}{q} = 42$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hence ,
\begin{align}
\pi(n) &amp;amp;\le \frac{p}{q}\times rub(n) \newline
\Longrightarrow \frac{n}{ln(n)} &amp;amp;\le 42 \times 2\sqrt{n} \newline
\Longrightarrow \frac{\sqrt{n}}{ln(n)} &amp;amp;\le 84 \newline
\Longrightarrow n_{max} &amp;amp;\approx \boxed{1415344} \newline
\end{align}&lt;/p&gt;
&lt;p&gt;Now we can just precalculate all prime,and the palindrome in the range $[0,n_{max}]$, then find out maximum such $n$ for which $\pi(n) \le \frac{p}{q}\times rub(n)$.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Primes or Palindromes?&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codeforces\/568a.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/contest/568/problem/A&#34;&gt;Codeforces - 568A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mathworld.wolfram.com/PrimeCountingFunction.html&#34;&gt;Prime number approximation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Complex Tashreef - Toph</title>
      <link>https://st3inum.github.io/posts/toph-complex-tashreef/</link>
      <pubDate>Mon, 26 Apr 2021 01:06:15 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/toph-complex-tashreef/</guid>
      <description>Statement: In this problem you are asked to calculate : $\sum_{i=L}^{R}{\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)} \equiv 0]}}$ , for given $L$ and $R$.
Inside Math: From the lucas&#39; theorem we can state that, $\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)}\equiv 1]} = 2^{f(i)}$ . [$f(i) = \text{ number of one in binary representation of } i$]
Suppose , $S(x) = \sum_{i=0}^{x}{\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)} \equiv 0]}}$ . Hence , our answer will be $S(R)-S(L-1)$</description>
      <content>&lt;h2 id=&#34;statement&#34;&gt;Statement:&lt;/h2&gt;
&lt;p&gt;In this problem you are asked to calculate : $\sum_{i=L}^{R}{\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)} \equiv 0]}}$ , for given $L$ and $R$.&lt;/p&gt;
&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;p&gt;From the lucas&#39; theorem we can state that, $\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)}\equiv 1]} = 2^{f(i)}$ . [$f(i) = \text{ number of one in binary representation of } i$]&lt;/p&gt;
&lt;p&gt;Suppose , $S(x) = \sum_{i=0}^{x}{\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)} \equiv 0]}}$ . Hence , our answer will be $S(R)-S(L-1)$&lt;/p&gt;
&lt;p&gt;Now,
\begin{align}
S(x) &amp;amp; = \sum_{i=0}^{x}{\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)} \equiv 0]}} \newline
&amp;amp; = \sum_{i=0}^{x}{(i+1) - 2^{f(i)}} \newline
&amp;amp; = \sum_{i=0}^{x}{(i+1)} - \sum_{i=0}^{x}{2^{f(i)}} \newline
&amp;amp; = \frac{(i+1)\times (i+2)}{2} - \sum_{i=0}^{x}{2^{f(i)}} \newline
\end{align}&lt;/p&gt;
&lt;p&gt;Now the challenge is to calculate $\sum_{i=0}^{x}{2^{f(i)}}$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to do this ?&lt;/strong&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
&lt;b&gt;Hint&lt;/b&gt;
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;ul&gt;
&lt;li&gt;digit dp&lt;/li&gt;
&lt;li&gt;divide and conquer&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;divide-and-conquer-solution&#34;&gt;Divide and Conquer solution:&lt;/h2&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
&lt;b&gt;Hint for divide and conquer&lt;/b&gt;
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
print the values of $f(0),f(1),f(2),&amp;hellip;f(10)&amp;hellip;$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;With some observation/math/googling we can find out that for any number $2^{k} - 1$ , $S(2^{k}-1) = 3^{k}$&lt;/p&gt;
&lt;p&gt;Again , for any number $x$ , if $i$ is maximum number such that $2^{i}-1 &amp;lt; x$ , then we can write $S(x) = S(2^{i}-1) + 2 \times S(x - 2^i)$&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Complex Tashreef : (Divide and Conquer)&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/toph\/complex-tashreef.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;p&gt;To avoid &lt;strong&gt;TLE&lt;/strong&gt; precalculate all values of $S(2^{i} - 1)$ and return them in function $S(n)$ directly.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://brilliant.org/wiki/lucas-theorem/&#34;&gt;Lucas&#39; Theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oeis.org/A001316&#34;&gt;OEIS A001316&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://toph.co/p/complex-tashreef&#34;&gt;Complex Tashreef - Intra AUST Programming Contest, Spring 2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Divisors - UVA 294</title>
      <link>https://st3inum.github.io/posts/uva-294/</link>
      <pubDate>Thu, 22 Apr 2021 10:03:45 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/uva-294/</guid>
      <description>In this problem we will run a segmented sieve for [l,r]. In sieve we will maintain &amp;ldquo;number of divisor of $n$ which is smaller or equal than $\sqrt{n}$&amp;quot;.
For each, $i\in [1,\sqrt{r}]$ we will increase number of divisor of each multiple of $i$ in range $[max(l,i^2),r]$.
After the sieve we will multiply $2$ with each number of divisor, because if $i$ is a divisor of $n$ such that $i\le \sqrt{n}$ , we will have another divisor $\frac{n}{i} \ge \sqrt{n}$.</description>
      <content>&lt;p&gt;In this problem we will run a segmented sieve for [l,r]. In sieve we will maintain &lt;strong&gt;&amp;ldquo;number of divisor of $n$ which is smaller or equal than $\sqrt{n}$&amp;quot;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For each, $i\in [1,\sqrt{r}]$ we will increase number of divisor of each multiple of $i$ in range $[max(l,i^2),r]$.&lt;/p&gt;
&lt;p&gt;After the sieve we will multiply $2$ with each number of divisor, because if $i$ is a divisor of $n$ such that $i\le \sqrt{n}$ , we will have another divisor $\frac{n}{i} \ge \sqrt{n}$. [if n is a square number , we will subtract $1$ also after multiplication].&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/uva\/294.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://onlinejudge.org/external/2/294.pdf&#34;&gt;UVA - 294&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Prime Factor Love - Toph</title>
      <link>https://st3inum.github.io/posts/toph-prime-factor-love/</link>
      <pubDate>Thu, 22 Apr 2021 02:31:20 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/toph-prime-factor-love/</guid>
      <description>Problem Description:   $mod = 1000009$
  $ [p] = \begin{cases} 1 \text{ if $p$ is true} \newline 0 \text{ if $p$ is not true} \end{cases}$
  $f(n) = \sum_{i=2}^{n-1}{[i|n]i}$
  $S(n) = \sum_{i=1}^{n}{f(i)}$ for a given n
  You need to find , sum of all prime factor of S(n)%mod
  Inside Math:   We know , $\sigma_1(n) = \sum_{i=1}^{n}{[i|n]i}$
  $sum(n) = \sum_{i=1}^{n}{i}$</description>
      <content>&lt;h2 id=&#34;problem-description&#34;&gt;Problem Description:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$mod = 1000009$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$ [p] = \begin{cases} 1 \text{ if $p$ is true} \newline 0 \text{ if $p$ is not true} \end{cases}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$f(n) = \sum_{i=2}^{n-1}{[i|n]i}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$S(n) = \sum_{i=1}^{n}{f(i)}$ for a given n&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You need to find , sum of all prime factor of S(n)%mod&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We know , $\sigma_1(n) = \sum_{i=1}^{n}{[i|n]i}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$sum(n) = \sum_{i=1}^{n}{i}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$sum(l,r) = \sum_{i=l}^{r}{i}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let assume , $ssod(n) = \sum_{i=1}^{n}{\sigma_1(i)}$ , ssod = sum of sum-of-divisor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can represent $S(n) = ssod(n) - sum(n) - n + [n&amp;gt;=1]$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now , if we can find $ssod(n)$ faster, we can solve the problem.&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=1}^{n}{\sigma_1(i)}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=1}^{n}{\sum_{j=1}^{i}{[j|i]j}}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=1}^{n}{\sum_{j=1}^{n}{[j|i]j}}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=j}^{n}{j \times \sum_{i=1}^{n}{[j|i]}}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=j}^{n}{j \times \lfloor \frac{n}{j} \rfloor}$&lt;/p&gt;
&lt;p&gt;Now there, might be $O(\sqrt{n})$ different values for $\lfloor \frac{n}{j} \rfloor$ [This is also known as Harmonic lemma]. We will iterate over all such values of $\lfloor \frac{n}{j} \rfloor$ , and sum up there contribution. Thus we can calculate values for $ssod(n)$ in $O(\sqrt{n})$ and then for $S(n)$.&lt;/p&gt;
&lt;p&gt;For the second part , we will maintain a sieve for values $[0,mod)$ and precalculate sum of prime factor of all the number in the range.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/toph\/prime-factor-love.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;spoj---afs2&#34;&gt;SPOJ - AFS2&lt;/h2&gt;
&lt;p&gt;Pretty much same problem.



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;AFS2&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code2&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/spoj\/AFS2.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code2&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;

&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://toph.co/p/prime-factor-love&#34;&gt;Toph - Prime Factor Love&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.spoj.com/problems/AFS2/en/&#34;&gt;SPOJ - AFS2 - Amazing Factor Sequence (medium)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/blog/entry/53925&#34;&gt;Harmonic Lemma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Divisor Set - Codeforces - 1257g</title>
      <link>https://st3inum.github.io/posts/codeforces-1257g/</link>
      <pubDate>Wed, 21 Apr 2021 23:41:52 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/codeforces-1257g/</guid>
      <description> cpp     var xmlHttp = new XMLHttpRequest(); xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codeforces\/1257g.cpp&#39;, false ); xmlHttp.send( null ); var div = document.getElementById(&#39;code1&#39;); div.textContent = &#39;\n&#39;+xmlHttp.responseText;  Reference:  Codeforces - 1257G Codeforces Editorial OEIS A096825  </description>
      <content>


  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codeforces\/1257g.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/contest/1257/problem/G&#34;&gt;Codeforces - 1257G&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/blog/entry/71434&#34;&gt;Codeforces Editorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oeis.org/A096825&#34;&gt;OEIS A096825&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
