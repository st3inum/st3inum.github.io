<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2-pointer on MathBugs</title>
    <link>https://st3inum.github.io/tags/2-pointer/</link>
    <description>Recent content in 2-pointer on MathBugs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 May 2021 23:00:02 +0600</lastBuildDate><atom:link href="https://st3inum.github.io/tags/2-pointer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AtCoder ABC-032 C</title>
      <link>https://st3inum.github.io/posts/atcoder-abc032c/</link>
      <pubDate>Mon, 10 May 2021 23:00:02 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/atcoder-abc032c/</guid>
      <description>Given an array $S$ of length $n$ and an integer $k$.
Find maximum value of $(r-l+1)$ such that $\prod_{i=l}^{r}{S_{i}} \le k$
 Constraints  click to hide    $1\le n \le 10^{5}$
  $0\le k \le 10^{9}$
  $0\le S_{i} \le 10^{9}$
     Bruteforce Solution $O(n^2)$: If any value of $S$ is $0$ then the answer is $n$
We call a segment $[l,r]$ valid if $\prod_{i=l}^{r}{S_{i}} \le k$</description>
      <content>&lt;blockquote&gt;
&lt;p&gt;Given an array $S$ of length $n$ and an integer $k$.&lt;br /&gt;
&lt;br /&gt;
Find maximum value of $(r-l+1)$ such that $\prod_{i=l}^{r}{S_{i}} \le k$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
&lt;b&gt;Constraints&lt;/b&gt;
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$1\le n \le 10^{5}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$0\le k \le 10^{9}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$0\le S_{i} \le 10^{9}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;bruteforce-solution-on2&#34;&gt;Bruteforce Solution $O(n^2)$:&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;If any value of $S$ is $0$ then the answer is $n$&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We call a segment $[l,r]$ &lt;code&gt;valid&lt;/code&gt; if $\prod_{i=l}^{r}{S_{i}} \le k$&lt;/p&gt;
&lt;p&gt;Loop over $l$ in range $[0,n-1]$ and $r$ in range $[l,n-1]$ and if $[l,r]$ is &lt;code&gt;valid&lt;/code&gt; maximise it&amp;rsquo;s length with our answer. It will pass subtask 1.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Bruteforce solution&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/atcoder\/abc032_c_bruteforce.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t go forward if you don&amp;rsquo;t understand this code&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;2-pointer-solution-on&#34;&gt;2-Pointer Solution $O(n)$:&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s define a function $H()$.&lt;/p&gt;
&lt;p&gt;$H(l) = \text{ maximum value of $r$ such that $[l,r]$ is valid}$.&lt;/p&gt;
&lt;p&gt;It is obvious that $H(l)\le H(l+1)$ [where $0\le l &amp;lt; n-1$].&lt;/p&gt;
&lt;p&gt;So, it is unnecessary to loop over $r$ in range $[l,n-1]$.&lt;/p&gt;
&lt;p&gt;It is enough to loop loop over $r$ in range $[H(l-1),n-1]$.&lt;/p&gt;
&lt;p&gt;Hence the amortize complexity will be $O(n)$. This method is also known as 2-pointer.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;2-pointer solution&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code2&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/atcoder\/abc032_c.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code2&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;p&gt;&lt;strong&gt;Carefully handle the overflow&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc032/tasks/abc032_c?lang=en&#34;&gt;AtCoder ABC-032 C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
