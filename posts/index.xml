<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on MathBugs</title>
    <link>https://st3inum.github.io/posts/</link>
    <description>Recent content in Posts on MathBugs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 May 2021 15:18:06 +0600</lastBuildDate><atom:link href="https://st3inum.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Multiplayer Action Game - Toph</title>
      <link>https://st3inum.github.io/posts/toph-the-multiplayer-action-game/</link>
      <pubDate>Thu, 20 May 2021 15:18:06 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/toph-the-multiplayer-action-game/</guid>
      <description>You are given two n-sphere, centered at C1, C2 and having a radius of R1, R2 respectively The velocity vector of the two n-sphere is V1, V2 respectively.
Find the minimum time, when the smaller n-sphere will be fully inside of the bigger one.
If it is impossible/minimum time is greater than 100000, then print -1.
 Constraints  click to hide    There will be atmost $10^{5}$ testcases.</description>
      <content>&lt;blockquote&gt;
&lt;p&gt;You are given two &lt;a href=&#34;https://en.wikipedia.org/wiki/N-sphere&#34;&gt;n-sphere&lt;/a&gt;, centered at C1, C2 and having a radius of R1, R2 respectively &lt;br /&gt;
&lt;br /&gt;
The velocity vector of the two n-sphere is V1, V2 respectively.&lt;br /&gt;
&lt;br /&gt;
Find the minimum time, when the smaller n-sphere will be fully inside of the bigger one.&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;If it is impossible/minimum time is greater than 100000, then print &lt;code&gt;-1&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
&lt;b&gt;Constraints&lt;/b&gt;
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There will be atmost $10^{5}$ testcases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$2\le n \le 10$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All other integers will be in range $[1,10^{4}]$.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;p&gt;If &lt;code&gt;n=2&lt;/code&gt;, when the smaller n-sphere will be fully inside of the bigger one?

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
&lt;b&gt;Answer&lt;/b&gt;
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;hr /&gt;
&lt;p&gt;if $\text{distance}(C1,C2)\le |R1-R2|$&lt;/p&gt;
&lt;p&gt;In other words, $|C1-C2| \le |R1-R2|$ Considering $C1$ and $C2$ as vectors.&lt;/p&gt;
&lt;hr /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;In the case of n-dimension, the answer won&amp;rsquo;t be different.&lt;/p&gt;
&lt;p&gt;After $x$ second the new position of $C1$ will be $(C1+x\times V1)$ and the new position of $C2$ will be $(C2+x\times V2)$.&lt;/p&gt;
&lt;p&gt;If in $x$ second the smaller circle will be inside of the bigger ones, then the following condition must be true.&lt;/p&gt;
&lt;p&gt;\begin{align}
|(C1+x\times V1)-(C2+x\times V2)| &amp;amp;\le |R1-R2| \newline
|(C1 - C2) + (x\times V1 - x\times V2)| &amp;amp;\le |R1-R2| \newline
|(C1 - C2) + x\times( V1 -  V2)| &amp;amp;\le |R1-R2| \newline
|(C1 - C2) + x\times( V1 -  V2)|^{2} &amp;amp;\le |R1-R2|^{2} \newline
\end{align}
Let&amp;rsquo;s assume,
\begin{align}
C &amp;amp;= C1 - C2\newline
V &amp;amp;= V1 - V2\newline
R &amp;amp;= |R1-R2|\newline
\end{align}
Hence, we can rewrite the equation as,
\begin{align}
|(C1 - C2) + x\times( V1 -  V2)|^{2} &amp;amp;\le |R1-R2|^{2} \newline
|C + xV|^{2} &amp;amp;\le R^{2} \newline
|C|^{2} + |xV|^{2} +2\times |C|.|xV| &amp;amp;\le R^{2} \newline
|C|^{2} + x^{2}|V|^{2} +2x\times |C|.|V| &amp;amp;\le R^{2} \newline
x^{2}|V|^{2} +2x\times |C|.|V| + (|C|^{2} - R^{2}) &amp;amp;\le 0 \newline
\end{align}
Let&amp;rsquo;s assume,
\begin{align}
a &amp;amp;=  |V|^{2} = |V|.|V|\newline
b &amp;amp;=  2\times |C|.|V|\newline
\text{and, } c &amp;amp;= |C|^{2} - R^{2} = |C|.|C| - R^{2}\newline
\end{align}&lt;/p&gt;
&lt;p&gt;Again, we can rewrite the equation as $ax^2+bx+c\le 0$ and we need to find the smallest such $x$.&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;ternary search&lt;/code&gt;. Alternatively, we can just solve the equation(as &lt;a href=&#34;https://st3inum.github.io/posts/toph-the-multiplayer-action-game/&#34;&gt;quadratic equation&lt;/a&gt;) and find the minimum such $x$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We must handle some cases, like $R1=R2$ or $a=0$&lt;/strong&gt;&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;The Multiplayer Action Game&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/toph\/the-multiplayer-action-game.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://toph.co/p/the-multiplayer-action-game&#34;&gt;Toph - The Multiplayer Action Game&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Unnamed Trick 1</title>
      <link>https://st3inum.github.io/posts/unnamed-trick-1/</link>
      <pubDate>Tue, 11 May 2021 03:01:48 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/unnamed-trick-1/</guid>
      <description>Prerequisite Task 1:  You are given two array $A$ and $B$ of length $n$.
For each $j$ ($0\le j \le n-1$) print $\sum_{i=0}^{j-1}{[A_{i}=B_{j}]}$
In other words, for each $j$($0\le j \le n-1$) print number of index $i$(i&amp;lt;j) where $B_j=A_i$
 Constraints  click to hide    $1\le n \le 10^{5}$
  $-10^{9} \le A_{i},B_{i} \le 10^{9}$
     cpp   map&amp;lt;int, int&amp;gt; cnt; for (int j = 0; j &amp;lt; n; j&amp;#43;&amp;#43;) { cout &amp;lt;&amp;lt; cnt[B[j]] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;; cnt[A[j]]&amp;#43;&amp;#43;; }   Prerequisite Task 2:  Same as task 1, just find $\sum_{j=0}^{n-1}{\sum_{i=0}^{j-1}{[A_{i}=B_{j}]}}$</description>
      <content>&lt;h2 id=&#34;prerequisite-task-1&#34;&gt;Prerequisite Task 1:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You are given two array $A$ and $B$ of length $n$.&lt;br /&gt;
&lt;br /&gt;
For each $j$ ($0\le j \le n-1$) print $\sum_{i=0}^{j-1}{[A_{i}=B_{j}]}$&lt;br /&gt;
&lt;br /&gt;
In other words, for each $j$($0\le j \le n-1$) print number of index $i$(i&amp;lt;j) where $B_j=A_i$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
&lt;b&gt;Constraints&lt;/b&gt;
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$1\le n \le 10^{5}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$-10^{9} \le A_{i},B_{i} \le 10^{9}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;




  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;

map&amp;lt;int, int&amp;gt; cnt;
for (int j = 0; j &amp;lt; n; j&amp;#43;&amp;#43;) {
	cout &amp;lt;&amp;lt; cnt[B[j]] &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
	cnt[A[j]]&amp;#43;&amp;#43;;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;



&lt;h2 id=&#34;prerequisite-task-2&#34;&gt;Prerequisite Task 2:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Same as &lt;code&gt;task 1&lt;/code&gt;, just find $\sum_{j=0}^{n-1}{\sum_{i=0}^{j-1}{[A_{i}=B_{j}]}}$&lt;br /&gt;
&lt;br /&gt;
In other words, number of pair $(i,j)$ where $i&amp;lt;j$ and $B_j=A_i$&lt;/p&gt;
&lt;/blockquote&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code2&#34;&gt;

long long ans = 0;
map&amp;lt;int, int&amp;gt; cnt;
for (int j = 0; j &amp;lt; n; j&amp;#43;&amp;#43;) {
	ans &amp;#43;= cnt[B[j]];
	cnt[A[j]]&amp;#43;&amp;#43;;
}
cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;



&lt;h2 id=&#34;prerequisite-task-3&#34;&gt;Prerequisite Task 3:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Same as &lt;code&gt;task 2&lt;/code&gt;, just find $\sum_{j=l_B}^{r_B}{\sum_{i=l_A}^{r_A}{[A_{i}=B_{j}][i&amp;lt;j]}}$&lt;br /&gt;
&lt;br /&gt;
In other words, number of pair $(i,j)$ where $i&amp;lt;j$ , $i\in [l_A,r_A]$ and $j\in [l_B,r_B]$ and $B_j=A_i$&lt;/p&gt;
&lt;/blockquote&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;3&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;3&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code3&#34;&gt;

long long ans = 0;
map&amp;lt;int, int&amp;gt; cnt;
for (int j = min(la, lb); j &amp;lt;= rb; j&amp;#43;&amp;#43;) {
    if (lb &amp;lt;= j &amp;amp;&amp;amp; j &amp;lt;= rb)ans &amp;#43;= cnt[B[j]];
    if (la &amp;lt;= j &amp;amp;&amp;amp; j &amp;lt;= ra)cnt[A[j]]&amp;#43;&amp;#43;;
}
cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;



&lt;h2 id=&#34;problem-1---codeforces-1520-dsame-differenceshttpscodeforcescomcontest1520problemd-&#34;&gt;Problem 1 - Codeforces 1520 D(&lt;a href=&#34;https://codeforces.com/contest/1520/problem/D&#34;&gt;Same Differences&lt;/a&gt;) :&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You are given an array $a$ of $n$ integers. Count the number of pairs of indices $(i,j)$ such that $i&amp;lt;j$ and $a_j−a_i=j−i$.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;solution&#34;&gt;Solution:&lt;/h3&gt;
&lt;p&gt;\begin{align}
a_j - a_i &amp;amp;= j-i\newline
a_j - j &amp;amp;= a_i - i
\end{align}&lt;/p&gt;
&lt;p&gt;Now, if we compare this with our &lt;code&gt;task 2&lt;/code&gt;, then $B_j=a_j-j$ and $A_i = a_i - i$&lt;/p&gt;
&lt;p&gt;Hence our solution will be:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;4&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;4&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Same Differences&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code4&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codeforces\/1520d.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code4&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;problem-2---toph-adorable-string-3httpstophcopadorable-string-3&#34;&gt;Problem 2 - Toph (&lt;a href=&#34;https://toph.co/p/adorable-string-3&#34;&gt;Adorable String &amp;lt;3&lt;/a&gt;)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Let’s call a string adorable if its number of consonant(s) is 1 more then its number of vowel(s).&lt;br /&gt;
&lt;br /&gt;
Find the number of adorable substring of a given string&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Suppose the given string is a $n$ length string , $s$[1 based indexing].&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s define some function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$s[l,r] = \text{ substring of $s$ from $l$ to $r$ index(both inclusive)}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$V(i) = \text{ number of vowel in $s[1,i]$}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$C(i) = \text{ number of consonant in $s[1,i]$}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$V(l,r) = V(r)-V(l-1) = \text{ number of vowel in $s[l,r]$}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$C(l,r) = C(r)-C(l-1) = \text{ number of consonant in $s[l,r]$}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hence, we can get these equations for $s[l+1,r]$:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$V(l+1,r) + C(l+1,r) = r-l$ [total length of s[l+1,r] equal to number of vowel + number of consonant]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$V(l+1,r) +1 = C(l+1,r)$ [if $s[l+1,r]$ is adorable]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Solving the both equation we can get:
\begin{align}
2V(l+1,r) +1 &amp;amp;=r-l\newline
2(V(r)-V(l))+1 &amp;amp;= r-l\newline
2V(r)-2V(l)+1 &amp;amp;=r-l\newline
2V(r)-r+1&amp;amp;=2V(l)-l
\end{align}&lt;/p&gt;
&lt;p&gt;Now if we convert this problem in our &lt;code&gt;task 3&lt;/code&gt;, $B_{r} = 2V(r)-r+1$ and $A_{l}=2V(l)-l$ and $A_{0} = 0$ here $l \in [0,n-1]$ and $r \in [1,n]$&lt;/p&gt;
&lt;p&gt;Hence, our code will be :&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;5&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;5&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Adorable String &amp;lt;3&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code5&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/toph\/adorable-string-3.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code5&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://toph.co/p/adorable-string-3&#34;&gt;Toph - Adorable String &amp;lt;3&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/1520/problem/D&#34;&gt;Codeforces - Same Differences&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;similar-problem&#34;&gt;Similar Problem:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/1398/problem/C&#34;&gt;Codeforces - Good Subarrays - 1398C&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/1420/problem/B&#34;&gt;Codeforces - Rock and Lever - 1420 B&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/1109/problem/A&#34;&gt;Codeforces - Sasha and a Bit of Relax - 1109 A&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/contest/1188/problem/B&#34;&gt;Codeforces - Count Pairs - 1188B&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://toph.co/p/not-bad-array&#34;&gt;Toph - Not Bad Array - BSMRSTU Home Quarantine Contest - 3&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://toph.co/p/divisible-by-3&#34;&gt;Toph - Divisible by 3 - BSMRSTU Home Quarantine Contest - 6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/arc104/tasks/arc104_b?lang=en&#34;&gt;AtCoder - DNA Sequence&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://codeforces.com/gym/101401/problem/C&#34;&gt;Smiley Faces (C) - 2017 PSUT Coding Marathon&lt;/a&gt; [&lt;strong&gt;Hard&lt;/strong&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>AtCoder ABC-032 C</title>
      <link>https://st3inum.github.io/posts/atcoder-abc032c/</link>
      <pubDate>Mon, 10 May 2021 23:00:02 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/atcoder-abc032c/</guid>
      <description>Given an array $S$ of length $n$ and an integer $k$.
Find maximum value of $(r-l+1)$ such that $\prod_{i=l}^{r}{S_{i}} \le k$
 Constraints  click to hide    $1\le n \le 10^{5}$
  $0\le k \le 10^{9}$
  $0\le S_{i} \le 10^{9}$
     Bruteforce Solution $O(n^2)$: If any value of $S$ is $0$ then the answer is $n$
We call a segment $[l,r]$ valid if $\prod_{i=l}^{r}{S_{i}} \le k$</description>
      <content>&lt;blockquote&gt;
&lt;p&gt;Given an array $S$ of length $n$ and an integer $k$.&lt;br /&gt;
&lt;br /&gt;
Find maximum value of $(r-l+1)$ such that $\prod_{i=l}^{r}{S_{i}} \le k$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
&lt;b&gt;Constraints&lt;/b&gt;
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$1\le n \le 10^{5}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$0\le k \le 10^{9}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$0\le S_{i} \le 10^{9}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;bruteforce-solution-on2&#34;&gt;Bruteforce Solution $O(n^2)$:&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;If any value of $S$ is $0$ then the answer is $n$&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We call a segment $[l,r]$ &lt;code&gt;valid&lt;/code&gt; if $\prod_{i=l}^{r}{S_{i}} \le k$&lt;/p&gt;
&lt;p&gt;Loop over $l$ in range $[0,n-1]$ and $r$ in range $[l,n-1]$ and if $[l,r]$ is &lt;code&gt;valid&lt;/code&gt; maximise it&amp;rsquo;s length with our answer. It will pass subtask 1.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Bruteforce solution&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/atcoder\/abc032_c_bruteforce.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t go forward if you don&amp;rsquo;t understand this code&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;2-pointer-solution-on&#34;&gt;2-Pointer Solution $O(n)$:&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s define a function $H()$.&lt;/p&gt;
&lt;p&gt;$H(l) = \text{ maximum value of $r$ such that $[l,r]$ is valid}$.&lt;/p&gt;
&lt;p&gt;It is obvious that $H(l)\le H(l+1)$ [where $0\le l &amp;lt; n-1$].&lt;/p&gt;
&lt;p&gt;So, it is unnecessary to loop over $r$ in range $[l,n-1]$.&lt;/p&gt;
&lt;p&gt;It is enough to loop loop over $r$ in range $[H(l-1),n-1]$.&lt;/p&gt;
&lt;p&gt;Hence the amortize complexity will be $O(n)$. This method is also known as 2-pointer.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;2-pointer solution&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code2&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/atcoder\/abc032_c.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code2&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;p&gt;&lt;strong&gt;Carefully handle the overflow&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc032/tasks/abc032_c?lang=en&#34;&gt;AtCoder ABC-032 C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Hashing 2 - Double Hash</title>
      <link>https://st3inum.github.io/posts/hashing2-double-hash/</link>
      <pubDate>Mon, 10 May 2021 18:17:14 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/hashing2-double-hash/</guid>
      <description>If you don&amp;rsquo;t read this blog or solved Kattis - inversefactorial on your own, complete these two tasks at first.
In our previous part, we take m=1000000009 in our solution. But if we take m=1000000011 or m=1000000125 what would happen?
If you are using these/some random values and getting WA, you are on the right track.
In our previous solution, we mapped every big value $p$ with some small value $H(p)$.</description>
      <content>&lt;p&gt;If you don&amp;rsquo;t read &lt;a href=&#34;https://st3inum.github.io/posts/kattis-inversefactorial/&#34;&gt;this&lt;/a&gt; blog or solved &lt;a href=&#34;https://open.kattis.com/problems/inversefactorial&#34;&gt;Kattis - inversefactorial&lt;/a&gt; on your own, complete these two tasks at first.&lt;/p&gt;
&lt;p&gt;In our &lt;a href=&#34;https://st3inum.github.io/posts/kattis-inversefactorial/&#34;&gt;previous part&lt;/a&gt;, we take &lt;code&gt;m=1000000009&lt;/code&gt; in our solution. But if we take  &lt;code&gt;m=1000000011&lt;/code&gt; or &lt;code&gt;m=1000000125&lt;/code&gt; what would happen?&lt;/p&gt;
&lt;p&gt;If you are using these/some random values and getting WA, you are on the right track.&lt;/p&gt;
&lt;p&gt;In our previous solution, we mapped every big value $p$ with some small value $H(p)$. But what if happening $H()$ function is giving the same result for different $p$. This is known as &lt;code&gt;hash collision&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;How to avoid it? By taking good $m$. But it is easy to generate &lt;code&gt;anti hash test case&lt;/code&gt;[anti hash test means such case where hash function cause collision]. So, in most of the time we can do the following things:&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$H_1{(p)} = p \text{ (mod m1)}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$H_2{(p)} = p \text{ (mod m2)}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$H(p) = (H_1{(p)},H_2{(p)})$ [pair of those 2 function]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or actually we can use some good combination of $H_1{(p)}$ and $H_2{(p)}$ as $H{(p)}$. Such as $H{(p)}=H_1{(p)}\times m2 + H_2{(p)} \times m1$.&lt;/p&gt;
&lt;p&gt;Now it has much less probability for hash collision. This is known as double hash. We can extend it with higher dimension, which is unnecessary.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Inverse Factorial : Double Hash&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/kattis\/inversefactorial-2.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://open.kattis.com/problems/inversefactorial&#34;&gt;Kattis - inversefactorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Hashing 1 : Inverse Factorial - Kattis inversefactorial</title>
      <link>https://st3inum.github.io/posts/kattis-inversefactorial/</link>
      <pubDate>Sat, 08 May 2021 20:13:49 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/kattis-inversefactorial/</guid>
      <description>$$f(n)=n!$$
 Given a value $x$ , find $f^{-1}{(x)}$ [that is, such $n$ so that $f(n)=x$].
Constraints  click to hide  number of digit in $x$ is atmost $10^{6}$    Solution: At first, this problem seems too hard.
Suppose, we have a bijective function $H(p)$ which return some small integer value for corresponding $p$.
Hence, we can uniquely represent every $p$ by $H(p)$.
How to make $H(p)$  click to hide   $H(p) = p \text{ (mod $m$)}$ [for a choosen $m$]</description>
      <content>&lt;blockquote&gt;
&lt;p&gt;$$f(n)=n!$$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Given a value $x$ , find $f^{-1}{(x)}$ [that is, such $n$ so that $f(n)=x$].&lt;/p&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
&lt;b&gt;Constraints&lt;/b&gt;
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
number of digit in $x$ is atmost $10^{6}$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution:&lt;/h2&gt;
&lt;p&gt;At first, this problem seems too hard.&lt;/p&gt;
&lt;p&gt;Suppose, we have a &lt;a href=&#34;https://en.wikipedia.org/wiki/Bijection&#34;&gt;bijective function&lt;/a&gt; $H(p)$ which return some small integer value for corresponding $p$.&lt;/p&gt;
&lt;p&gt;Hence, we can uniquely represent every $p$ by $H(p)$.&lt;/p&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
&lt;b&gt;How to make $H(p)$&lt;/b&gt;
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;blockquote&gt;
&lt;p&gt;$H(p) = p \text{ (mod $m$)}$ [for a choosen $m$]&lt;br /&gt;
&lt;br /&gt;
But, this function is not bijective. That means it will give same output for different input. For example: $H(m+x) = H(2m+x) = &amp;hellip; = H(mk+x)$ , but $m+x,2m+x&amp;hellip;,mk+x$ are different.&lt;br /&gt;
&lt;br /&gt;
Although it is not bijective, we can choose some good $m$ [different for different types of problem], to do better performance[The function becomes bijective for random domain].&lt;br /&gt;
&lt;br /&gt;
We can take a prime number as the value of $m$. It will be good.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now, calculate $y = H(x) = x \text{ (mod m)}$.&lt;/p&gt;
&lt;p&gt;Again, calculate $H(n!) = n! \text{ (mod m)}$ , for all $n \in [0,10^{6}]$. And check, if it matches with $y$.&lt;/p&gt;
&lt;p&gt;Hence we can find $f^{-1}{(x)}$.&lt;/p&gt;
&lt;p&gt;If we choose good $m$ , our probability of collision[that is $H(p)=H(q)$ while $p\neq q$] will be too much low.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t know how to &lt;code&gt;mod&lt;/code&gt;, read &lt;a href=&#34;https://st3inum.github.io/posts/intro-to-modular-arithmetic/&#34;&gt;this&lt;/a&gt; article.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Inverse Factorial&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/kattis\/inversefactorial.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://open.kattis.com/problems/inversefactorial&#34;&gt;Kattis - inversefactorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;similar-problems&#34;&gt;Similar Problems:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.codechef.com/problems/AMIFIB&#34;&gt;Am I a Fibonacci Number - Codechef&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Harmonic Lemma : H(n) - UVA 11526</title>
      <link>https://st3inum.github.io/posts/uva-11526/</link>
      <pubDate>Sat, 08 May 2021 16:08:11 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/uva-11526/</guid>
      <description>For a given $n$ , calculate $\sum_{i=1}^{n}{\lfloor \frac{n}{i} \rfloor}$
The main idea of this problem is there are maximum $2\sqrt{n}$ different values of $\lfloor \frac{n}{i} \rfloor$. [This is also known as Harmonic lemma]
[But why?]  click to hide    Case 1: $x\le \sqrt{n}$
 Hence, if we divide $n$ with $1\le i\le x$, number of values of $\lfloor \frac{n}{i} \rfloor$ will be at most $x$ (because, if all values were different, even then there will be $x$ values).</description>
      <content>&lt;p&gt;For a given $n$ , calculate $\sum_{i=1}^{n}{\lfloor \frac{n}{i} \rfloor}$&lt;/p&gt;
&lt;p&gt;The main idea of this problem is there are maximum $2\sqrt{n}$ different values of $\lfloor \frac{n}{i} \rfloor$. [This is also known as Harmonic lemma]&lt;/p&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
[But why?]
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Case 1: $x\le \sqrt{n}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hence, if we divide $n$ with $1\le i\le x$, number of values of $\lfloor \frac{n}{i} \rfloor$ will be at most $x$ (because, if all values were different, even then there will be $x$ values). Which is equal to $\sqrt{n}$.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Case 2: $x&amp;gt;\sqrt{n}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hence the values of $\lfloor \frac{n}{i} \rfloor$ (where $\sqrt{n} &amp;lt; i \le n$) will be in range $[\frac{n}{n},\frac{n}{\sqrt{n}}] = [1,\sqrt{n}]$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\therefore$ number of unique values of $\lfloor \frac{n}{i} \rfloor$ will be at most $\sqrt{n}$.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$\therefore$ Number of different values of $\lfloor \frac{n}{i} \rfloor$ is maximum $2\sqrt{n}$.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now, we will only iterate over those unique values of $\lfloor \frac{n}{i} \rfloor$.&lt;/p&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
How can we do it?
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;ul&gt;
&lt;li&gt;Binary search&lt;/li&gt;
&lt;li&gt;Doing some division &amp;hellip;.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;




  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Harmonic Lemma code template&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code2&#34;&gt;

for (int i = 1, j, v; i &amp;lt;= n &amp;amp;&amp;amp; (j = n / (v = (n / i))); i = j &amp;#43; 1) {
	// all value x in range [i,j] will have same value floor(n/x) = v
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;






  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Gift Dilemma&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/uva\/11526.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://onlinejudge.org/external/115/11526.pdf&#34;&gt;UVA - 11526&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/blog/entry/53925&#34;&gt;Harmonic Lemma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;similar-problems&#34;&gt;Similar Problems:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lightoj.com/problem/harmonic-number-ii&#34;&gt;Harmonic Number (II) - Lightoj&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Modulo - Toph</title>
      <link>https://st3inum.github.io/posts/toph-modulo/</link>
      <pubDate>Sat, 08 May 2021 14:57:26 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/toph-modulo/</guid>
      <description>You will be given an array, $A$ of length $n$ and $q$ queries. In each query you will be given a value $x$. You have to perform $A_{i} = A_{i} \text{ (mod $x$)} , 1 \le i \le n$ for each query , and after all the query print the array.
Constraints  click to hide   $A_{i} \le 2^{60}$ $n\le 10^{5}$ $q\le 10^{5}$ $x \le 2^{60}$     Solution: When $A_{i} = A_{i} \text{ (mod $x$)}$ operation change $A_{i}$ ?</description>
      <content>&lt;p&gt;You will be given an array, $A$ of length $n$ and $q$ queries. In each query you will be given a value $x$. You have to perform $A_{i} = A_{i} \text{ (mod $x$)} , 1 \le i \le n$ for each query , and after all the query print the array.&lt;/p&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
&lt;b&gt;Constraints&lt;/b&gt;
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;ul&gt;
&lt;li&gt;$A_{i} \le 2^{60}$&lt;/li&gt;
&lt;li&gt;$n\le 10^{5}$&lt;/li&gt;
&lt;li&gt;$q\le 10^{5}$&lt;/li&gt;
&lt;li&gt;$x \le 2^{60}$&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution:&lt;/h2&gt;
&lt;p&gt;When $A_{i} = A_{i} \text{ (mod $x$)}$ operation change $A_{i}$ ?&lt;/p&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
&lt;b&gt;Answer&lt;/b&gt;
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
When $A_{i}\ge x$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Lets call a $A_{i}$ valid, for a given $x$, if $A_{i}\ge x$.&lt;/p&gt;
&lt;p&gt;Hence, our solution is, for each query, we will iterate over only valid numbers, and do &lt;code&gt;%=&lt;/code&gt; operation on them [&lt;code&gt;a%=x&lt;/code&gt;].&lt;/p&gt;
&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;p&gt;But why this solution will work?&lt;/p&gt;
&lt;p&gt;Suppose, $a$ is valid for $x$, and we have done $a&#39;=a \text{ (mod $x$)}$.&lt;/p&gt;
&lt;p&gt;Now, $a&#39;\le \frac{a}{2}$ [But why ?]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Case 1: $x\le \frac{a}{2}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hence, if we divide $a$ with $x$, the remainder will be smaller than $x$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\therefore$ $a&#39;\le x$ or $a&#39;\le \frac{a}{2}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Case 2: $x&amp;gt;\frac{a}{2}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hence the remainder will be $a-x$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\therefore a&#39;=a-x$ or $a&#39;\le\frac{a}{2}$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hence, one value, $A_{i}$,  will become a valid value atmost $log_{2}{(2^{60})} = 60$ times.&lt;/p&gt;
&lt;p&gt;Hence if we iterate over only the valid value , number of overall iteration will be amortize $60\times n$.&lt;/p&gt;
&lt;p&gt;But as we are using &lt;code&gt;priority_queue&lt;/code&gt; to maintain our array our total complexity will be $O(nlog(n)log(A_{max}))$&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Modulo&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/toph\/modulo.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://toph.co/p/modulo&#34;&gt;Modulo - Toph&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Gift Dilemma - UVA 12775</title>
      <link>https://st3inum.github.io/posts/uva-12775/</link>
      <pubDate>Fri, 07 May 2021 13:01:54 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/uva-12775/</guid>
      <description>$Ax+By+Cz=P$ , $0\le x,y,z$ and $200 \le \frac{C}{gcd(A,B,C)}$.
For given $A,B,C,P$ find number of triplet $(x,y,z)$.
Solution: \begin{align} 200 &amp;amp;\le \frac{C}{gcd(A,B,C)} \newline C &amp;amp;\ge 200\times gcd(A,B,C) \newline \therefore C &amp;amp;\ge 200 \end{align}
Hence, we will rewrite the eqation as $Ax+By+Cz=P \Longrightarrow Ax+By=P-Cz=P&#39;$
We will iterate over all possible values of $P&#39;$(there will be maximum $\frac{10^{8}}{200}$), and for each value of $P&#39;$ we will find number of pair $(x,y)$ that satisfy $Ax+By=P&#39;$ , and sum them up.</description>
      <content>&lt;p&gt;$Ax+By+Cz=P$ , $0\le x,y,z$ and $200 \le \frac{C}{gcd(A,B,C)}$.&lt;/p&gt;
&lt;p&gt;For given $A,B,C,P$ find number of triplet $(x,y,z)$.&lt;/p&gt;
&lt;h1 id=&#34;solution&#34;&gt;Solution:&lt;/h1&gt;
&lt;p&gt;\begin{align}
200 &amp;amp;\le \frac{C}{gcd(A,B,C)} \newline
C &amp;amp;\ge 200\times gcd(A,B,C) \newline
\therefore C &amp;amp;\ge 200
\end{align}&lt;/p&gt;
&lt;p&gt;Hence, we will rewrite the eqation as $Ax+By+Cz=P \Longrightarrow Ax+By=P-Cz=P&#39;$&lt;/p&gt;
&lt;p&gt;We will iterate over all possible values of $P&#39;$(there will be maximum $\frac{10^{8}}{200}$), and for each value of $P&#39;$ we will find number of pair $(x,y)$ that satisfy $Ax+By=P&#39;$ , and sum them up.&lt;/p&gt;
&lt;p&gt;We can use extended euclid to solve the diophantine equation and solve the modified problem. But in this post we will solve the problem in other way.&lt;/p&gt;
&lt;h1 id=&#34;popovicius-theorem&#34;&gt;Popoviciu&amp;rsquo;s Theorem:&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;[Don&amp;rsquo;t know the name of the theorem actually :p]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$ax+by=c$ and $0\le x,y$ . Find number of pair $(x,y)$ that satisfy the equation.&lt;/p&gt;
&lt;p&gt;The answer is $\frac{c}{ab}-\{\frac{b&amp;rsquo;c}{a}\}-\{\frac{a&amp;rsquo;c}{b}\}+1$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$a\times a&#39; \equiv 1 \text{ (mod $b$)}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$b\times b&#39; \equiv 1 \text{ (mod $a$)}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$\{x\} = x-\lfloor x \rfloor$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Gift Dilemma&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/uva\/12775.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://onlinejudge.org/external/127/12775.pdf&#34;&gt;UVA - 12775&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://algo.codemarshal.org/contests/bd-ncpc-2014/problems/F&#34;&gt;Gift Dilemma : DIU NCPC 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brilliant.org/wiki/postage-stamp-problem-chicken-mcnugget-theorem/&#34;&gt;Popoviciu&amp;rsquo;s Theorem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Long Sandwich - Codechef SANDWICH</title>
      <link>https://st3inum.github.io/posts/codechef-sandwich/</link>
      <pubDate>Fri, 30 Apr 2021 22:03:31 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/codechef-sandwich/</guid>
      <description>It has two parts to this problem. You are given $n$ and $k$. You have to tell the minimum number of pieces, $a$, you can cut a sandwich of length $n$ such that the length of no piece is greater than $k$.
The answer is quite simple, isn&amp;rsquo;t it ?
Answer of the first part  click to hide  $a = \lceil \frac{n}{k} \rceil$    The second part is, how many ways we can cut the sandwich into $a$ pieces such that the length of no piece is greater than $k$.</description>
      <content>&lt;p&gt;It has two parts to this problem. You are given $n$ and $k$. You have to tell the minimum number of pieces, $a$, you can cut a sandwich of length $n$ such that the length of no piece is greater than $k$.&lt;/p&gt;
&lt;p&gt;The answer is quite simple, isn&amp;rsquo;t it ?&lt;/p&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
Answer of the first part
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
$a = \lceil \frac{n}{k} \rceil$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The second part is, how many ways we can cut the sandwich into $a$ pieces such that the length of no piece is greater than $k$. You have print the answer under modulo $m$, for a given $m$.&lt;/p&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
Hint for the second part
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;code&gt;Stars and Bars Theorem&lt;/code&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;p&gt;Suppose, we have exactly $ak$ length of sandwich. How many ways are there to cut the sandwich ? Answer : 1.&lt;/p&gt;
&lt;p&gt;Now, we have some $extra = ak-n$ length of sandwich , which we have to subtract.&lt;/p&gt;
&lt;p&gt;Now, the problem turns into: &lt;strong&gt;how many ways we can cut a sandwich of length, $extra$, into $a$ pieces.&lt;/strong&gt; [Because if in one way we can cut $p$ length of sandwich for the $i$&amp;lsquo;th piece, we can actually subtract $p$ from the $i$&amp;lsquo;th piece in the previous solution].&lt;/p&gt;
&lt;p&gt;Hence, our solution is $\binom{extra + a - 1}{a - 1}$ [Directly from stars and bars theorem].&lt;/p&gt;
&lt;h2 id=&#34;subtask-1&#34;&gt;Subtask 1:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$1\le n,k \le 50$&lt;/li&gt;
&lt;li&gt;$2 \le m \le 10^{6}$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can directly calculate our solution with dp.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Long Sandwich: subtask 1&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codechef\/SANDWICH_1.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;subtask-3&#34;&gt;Subtask 3:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$1\le n,k \le 10^{18}$&lt;/li&gt;
&lt;li&gt;$2 \le m \le 10^{6}$ and $m$ is a prime number.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this case we can calculate the value of $\binom{n}{r}$ with lucas theorem.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;3&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;3&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Long Sandwich: subtask 3&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code3&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codechef\/SANDWICH_3.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code3&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;subtask-4&#34;&gt;Subtask 4:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$1\le n,k \le 10^{18}$&lt;/li&gt;
&lt;li&gt;$2 \le m \le 10^{6}$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this case, at first, we will calculate $\binom{n}{r}$ modulo prime power. Then merge them up with &lt;code&gt;CRT&lt;/code&gt; and get the value of $\binom{n}{r}$ modulo an arbitrary number.&lt;/p&gt;
&lt;p&gt;To calculate $\binom{n}{r}$ (mod $p^{k}$) [$p$ is a prime number and $k&amp;gt;0$], we will calculate $n!$ (mod $p^{k}$) , but ignoring all occurrences of $p$.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s define some function/variables.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$F_{n} = \prod_{i = 1 , p\nmid i}^{n}{i}$ (mod $p^{k}$)&lt;/li&gt;
&lt;li&gt;$L(n) = $ max $k$ such that $p^k \mid n!$ [with Legendre&amp;rsquo;s Formula]&lt;/li&gt;
&lt;li&gt;$f(n)$ = $\frac{n!}{p^{L(n)}}$ (mod $p^{k}$)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;calculate-ln&#34;&gt;Calculate $L(n)$:&lt;/h3&gt;
&lt;p&gt;$L(n) = \sum_{i=1}^{\infty}{\lfloor \frac{n}{p^{i}} \rfloor}$ [known as Legendre&amp;rsquo;s Formula]&lt;/p&gt;
&lt;h3 id=&#34;calculate-fn&#34;&gt;Calculate $f(n)$:&lt;/h3&gt;
&lt;p&gt;$ f(n) = \begin{cases} 1 \text{ , if $n=0$} \newline F_{p^{e}}^{\lfloor \frac{n}{p^e} \rfloor} \times F_{n \text{ (mod $p^e$)}} \times f(\lfloor \frac{n}{p} \rfloor) \text{ , if $n \neq 0$} \end{cases}$&lt;/p&gt;
&lt;h3 id=&#34;calculate-binomnr&#34;&gt;Calculate $\binom{n}{r}$:&lt;/h3&gt;
&lt;p&gt;$\binom{n}{r} = \frac{f(n)}{f(r)\times f(n-r)} \times p^{L(n)-L(r)-L(n-r)}$&lt;/p&gt;
&lt;p&gt;Now, the remaining part is to merge all answer from $p^k$ [$p^k\mid m$ and $p^{k+1}\nmid m$] with &lt;code&gt;CRT&lt;/code&gt; .&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;4&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;4&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Long Sandwich: subtask 4&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code4&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codechef\/SANDWICH_4.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code4&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.codechef.com/problems/SANDWICH&#34;&gt;Codechef - SANDWICH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forthright48.com/stars-and-bars-theorem&#34;&gt;Stars and Bars Theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forthright48.com/chinese-remainder-theorem-part-1-coprime-moduli/&#34;&gt;CRT - Chinese Remainder Theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brilliant.org/wiki/lucas-theorem/&#34;&gt;Lucas&amp;rsquo; Theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Legendre%27s_formula&#34;&gt;Legendre&amp;rsquo;s Formula&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cp-algorithms.com/combinatorics/binomial-coefficients.html&#34;&gt;Emaxx : Binomial Coefficients&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Leading and Trailing - UVA 11029</title>
      <link>https://st3inum.github.io/posts/uva-11029/</link>
      <pubDate>Wed, 28 Apr 2021 01:28:53 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/uva-11029/</guid>
      <description>For given $n$ and $m$ print the value LLL...TTT where LLL is the leading $3$ digits of $n^{m}$ and TTT is trailing $3$ digits of $n^{m}$.
Inside Math: For TTT we just use modular arithmetic and find $n^{m} \text{ (mod 1000)}$
Now, assume that , number of digit of $n^{m}$ is $x$. Hence LLL must be equals to $\lfloor \frac{n^{m}}{10^{x-3}}\rfloor$
How to find x ?  click to hide  \begin{align} 10^{x-1} \le n^{m} &amp;amp;&amp;lt; 10^{x} \text{ [Number of digit in }10^{x-1}\text{ is equals to }x\text{ ]}\newline log_{10}{10^{x-1}} \le log_{10}{n^{m}} &amp;amp;&amp;lt; log_{10}{10^{x}} \newline x-1 \le m \times log_{10}{n} &amp;amp;&amp;lt; x \newline x &amp;amp;\le m \times log_{10}{n} + 1 \newline \therefore\text{maximum possible integer value of }&amp;amp;x\text{ is }\lfloor m \times log_{10}{n} + 1 \rfloor\text{ or }\lfloor m \times log_{10}{n} \rfloor +1 \end{align}    But how to calculate $\lfloor \frac{n^{m}}{10^{x-3}}\rfloor$ ?</description>
      <content>&lt;p&gt;For given $n$ and $m$ print the value &lt;code&gt;LLL...TTT&lt;/code&gt; where &lt;code&gt;LLL&lt;/code&gt; is the leading $3$ digits of $n^{m}$ and &lt;code&gt;TTT&lt;/code&gt; is trailing $3$ digits of $n^{m}$.&lt;/p&gt;
&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;p&gt;For &lt;code&gt;TTT&lt;/code&gt; we just use modular arithmetic and find $n^{m} \text{ (mod 1000)}$&lt;/p&gt;
&lt;p&gt;Now, assume that , number of digit of $n^{m}$ is $x$.
Hence &lt;code&gt;LLL&lt;/code&gt; must be equals to $\lfloor \frac{n^{m}}{10^{x-3}}\rfloor$&lt;/p&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
How to find x ?
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
\begin{align}
10^{x-1} \le n^{m} &amp;amp;&amp;lt; 10^{x} \text{ [Number of digit in }10^{x-1}\text{ is equals to }x\text{ ]}\newline
log_{10}{10^{x-1}} \le log_{10}{n^{m}} &amp;amp;&amp;lt; log_{10}{10^{x}} \newline
x-1 \le m \times log_{10}{n} &amp;amp;&amp;lt; x \newline
x &amp;amp;\le m \times log_{10}{n} + 1 \newline
\therefore\text{maximum possible integer value of }&amp;amp;x\text{ is }\lfloor m \times log_{10}{n} + 1 \rfloor\text{ or }\lfloor m \times log_{10}{n} \rfloor +1
\end{align}
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;But how to calculate $\lfloor \frac{n^{m}}{10^{x-3}}\rfloor$ ?

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
Solution of the problem
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
\begin{align}
\lfloor \frac{n^{m}}{10^{x-3}}\rfloor &amp;amp;= \lfloor 10^{log_{10}{(\frac{n^{m}}{10^{x-3}})}}\rfloor \newline
&amp;amp;= \lfloor 10^{log_{10}{(n^{m})} - log_{10}{(10^{x-3})}}\rfloor \newline
&amp;amp;= \lfloor 10^{m \times log_{10}{(n)} - (x-3) \times log_{10}{(10)}}\rfloor \newline
&amp;amp;= \lfloor 10^{m \times log_{10}{(n)} - (x-3)}\rfloor \newline
&amp;amp;= \lfloor 10^{m \times log_{10}{(n)} - (\lfloor (m \times log_{10}{(n)})\rfloor + 1 -3)}\rfloor\newline
&amp;amp;= \lfloor 10^{m \times log_{10}{(n)} - (\lfloor (m \times log_{10}{(n)})\rfloor -2)}\rfloor\newline
\end{align}
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Leading and Trailing - uva 11029&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/uva\/11029.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://onlinejudge.org/external/110/11029.pdf&#34;&gt;UVA - 11029&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Fraction and Sequence - UVA 13041</title>
      <link>https://st3inum.github.io/posts/uva-13041/</link>
      <pubDate>Tue, 27 Apr 2021 19:54:10 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/uva-13041/</guid>
      <description>How many triplet $(a,b,c)$ are there such that $0\le a,b,c \le L$ and $\sum_{x=0}^{\infty}{(ax^{2}+bx+c)\times (\frac{1}{10})^{x+1}} = \frac{p}{q}$ , for given $p,q,L$.
Inside Math: Suppose, $A = \sum_{x=0}^{\infty}{ax^2\times (\frac{1}{10})^{x+1}}$
$B = \sum_{x=0}^{\infty}{bx\times (\frac{1}{10})^{x+1}}$
$C = \sum_{x=0}^{\infty}{c\times (\frac{1}{10})^{x+1}}$
Hence, $\sum_{x=0}^{\infty}{(ax^{2}+bx+c)\times (\frac{1}{10})^{x+1}} = A+B+C$
Now, we know(Actually we don&amp;rsquo;t know this, we have to prove this. We&amp;rsquo;ll try to prove this in some other section) that:
$\sum_{x=0}^{\infty}{x^{2}r^{x+1}} = \frac{r^{2}(r+1)}{(r-1)^{3}} \tag{1}$
$\sum_{x=0}^{\infty}{xr^{x+1}} = \frac{r^{2}}{(r-1)^{2}} \tag{2}$</description>
      <content>&lt;p&gt;How many triplet $(a,b,c)$ are there such that $0\le a,b,c \le L$ and $\sum_{x=0}^{\infty}{(ax^{2}+bx+c)\times (\frac{1}{10})^{x+1}} = \frac{p}{q}$ , for given $p,q,L$.&lt;/p&gt;
&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;p&gt;Suppose,
$A = \sum_{x=0}^{\infty}{ax^2\times (\frac{1}{10})^{x+1}}$&lt;/p&gt;
&lt;p&gt;$B = \sum_{x=0}^{\infty}{bx\times (\frac{1}{10})^{x+1}}$&lt;/p&gt;
&lt;p&gt;$C = \sum_{x=0}^{\infty}{c\times (\frac{1}{10})^{x+1}}$&lt;/p&gt;
&lt;p&gt;Hence, $\sum_{x=0}^{\infty}{(ax^{2}+bx+c)\times (\frac{1}{10})^{x+1}} = A+B+C$&lt;/p&gt;
&lt;p&gt;Now, we know(Actually we don&amp;rsquo;t know this, we have to prove this. We&amp;rsquo;ll try to prove this in some other section) that:&lt;/p&gt;
&lt;p&gt;$\sum_{x=0}^{\infty}{x^{2}r^{x+1}} = \frac{r^{2}(r+1)}{(r-1)^{3}} \tag{1}$&lt;/p&gt;
&lt;p&gt;$\sum_{x=0}^{\infty}{xr^{x+1}} = \frac{r^{2}}{(r-1)^{2}} \tag{2}$&lt;/p&gt;
&lt;p&gt;$\sum_{x=0}^{\infty}{r^{x+1}} = \frac{r}{(r-1)} \tag{3}$&lt;/p&gt;
&lt;p&gt;from the above $(1)$, $(2)$ and $(3)$ we can easily find, $A = \frac{11}{3^{6}}$, $B = \frac{1}{3^{4}}$, $C = \frac{1}{3^{2}}$&lt;/p&gt;
&lt;p&gt;Hence :
\begin{align}
\sum_{x=0}^{\infty}{(ax^{2}+bx+c)\times (\frac{1}{10})^{x+1}} &amp;amp;= A+B+C \newline
\sum_{x=0}^{\infty}{(ax^{2}+bx+c)\times (\frac{1}{10})^{x+1}} &amp;amp;= a\times \frac{11}{3^{6}}+ b\times \frac{1}{3^{4}} + c\times \frac{1}{3^{2}} = \frac{p}{q} \newline
\frac{11a+9b+81c}{3^{6}} &amp;amp;= \frac{p}{q} \newline
11a+9b+81c &amp;amp;= \frac{p\times 3^{6} }{q} \newline
11a+9b &amp;amp;= \frac{p\times 3^{6}}{q} - 81c = r \text{ [Here } q \text{ must be a divisor of }3^6\text{]} \newline
\end{align}&lt;/p&gt;
&lt;p&gt;Now , $11a+9b=r$ is a linear diophantine equation.&lt;/p&gt;
&lt;p&gt;By solving this diophantine equation we will get: $a = 9x-4r$ and $b=5r-11x$ for any integer $x$.&lt;/p&gt;
&lt;p&gt;Now ,
\begin{align}
0\le a \le L \newline
0\le 9x-4r \le L \newline
\frac{4r}{9} \le x \le \frac{L+4r}{9}
\end{align}
Hence , $x \in [\lceil \frac{4r}{9} \rceil , \lfloor \frac{L+4r}{9} \rfloor]$&lt;/p&gt;
&lt;p&gt;Again ,
\begin{align}
0\le b \le L \newline
0\le 5r-11x \le L \newline
\frac{5r-L}{11} \le x \le \frac{5r}{11}
\end{align}
Hence , $x \in [\lceil \frac{5r-L}{11} \rceil , \lfloor \frac{5r}{11} \rfloor]$&lt;/p&gt;
&lt;p&gt;Hence , actual value of $x$ will be in range $[\lceil \frac{4r}{9} \rceil , \lfloor \frac{L+4r}{9} \rfloor] \cap [\lceil \frac{5r-L}{11} \rceil , \lfloor \frac{5r}{11} \rfloor] = [max(\lceil \frac{4r}{9} \rceil , \lceil \frac{5r-L}{11} \rceil) , min(\lfloor \frac{L+4r}{9} \rfloor , \lfloor \frac{5r}{11} \rfloor)]$&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution:&lt;/h2&gt;
&lt;p&gt;Now we will just iterate over $c \in [0,L]$ , then for each $r = \frac{p\times 3^{6}}{q} - 81c$ we will add $max(min(\lfloor \frac{L+4r}{9} \rfloor , \lfloor \frac{5r}{11} \rfloor) - max(\lceil \frac{4r}{9} \rceil , \lceil \frac{5r-L}{11} \rceil)+1, 0)$ to our answer.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Fraction and Sequence&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/uva\/13041.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;p&gt;Actually, it is not a good solution, we can optimize it furthermore. But it will pass the problem.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://onlinejudge.org/external/130/13041.pdf&#34;&gt;UVA - 13041&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://algo.codemarshal.org/contests/sustiupc2015/problems/H&#34;&gt;Fraction and Sequence : SUST IUPC 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Diophantine_equation&#34;&gt;Diophantine Equation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Primes or Palindromes? - Codeforces - 568a</title>
      <link>https://st3inum.github.io/posts/codeforces-568a/</link>
      <pubDate>Tue, 27 Apr 2021 01:46:42 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/codeforces-568a/</guid>
      <description>$\pi(n) = \text{ number of prime number smaller than or equal to n}$ . $rub(n) = \text{ number of palindromic number smaller than or equal to n}$ .  For a given $p$ and $q$ find maximum such $n$ so that, $\pi(n)\le \frac{p}{q}\times rub(n)$
Inside Math:  $\pi(n) \approx \frac{n}{ln(n)}$ [Prime number approximation] $rub(n) \approx 2\sqrt{n}$ maximum value of $\frac{p}{q} = 42$  Hence , \begin{align} \pi(n) &amp;amp;\le \frac{p}{q}\times rub(n) \newline \Longrightarrow \frac{n}{ln(n)} &amp;amp;\le 42 \times 2\sqrt{n} \newline \Longrightarrow \frac{\sqrt{n}}{ln(n)} &amp;amp;\le 84 \newline \Longrightarrow n_{max} &amp;amp;\approx \boxed{1415344} \newline \end{align}</description>
      <content>&lt;ul&gt;
&lt;li&gt;$\pi(n) = \text{ number of prime number smaller than or equal to n}$ .&lt;/li&gt;
&lt;li&gt;$rub(n) = \text{ number of palindromic number smaller than or equal to n}$ .&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a given $p$ and $q$ find maximum such $n$ so that, $\pi(n)\le \frac{p}{q}\times rub(n)$&lt;/p&gt;
&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;$\pi(n) \approx \frac{n}{ln(n)}$ [Prime number approximation]&lt;/li&gt;
&lt;li&gt;$rub(n) \approx 2\sqrt{n}$&lt;/li&gt;
&lt;li&gt;maximum value of $\frac{p}{q} = 42$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hence ,
\begin{align}
\pi(n) &amp;amp;\le \frac{p}{q}\times rub(n) \newline
\Longrightarrow \frac{n}{ln(n)} &amp;amp;\le 42 \times 2\sqrt{n} \newline
\Longrightarrow \frac{\sqrt{n}}{ln(n)} &amp;amp;\le 84 \newline
\Longrightarrow n_{max} &amp;amp;\approx \boxed{1415344} \newline
\end{align}&lt;/p&gt;
&lt;p&gt;Now we can just precalculate all prime,and the palindrome in the range $[0,n_{max}]$, then find out maximum such $n$ for which $\pi(n) \le \frac{p}{q}\times rub(n)$.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Primes or Palindromes?&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codeforces\/568a.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/contest/568/problem/A&#34;&gt;Codeforces - 568A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mathworld.wolfram.com/PrimeCountingFunction.html&#34;&gt;Prime number approximation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Complex Tashreef - Toph</title>
      <link>https://st3inum.github.io/posts/toph-complex-tashreef/</link>
      <pubDate>Mon, 26 Apr 2021 01:06:15 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/toph-complex-tashreef/</guid>
      <description>Statement: In this problem you are asked to calculate : $\sum_{i=L}^{R}{\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)} \equiv 0]}}$ , for given $L$ and $R$.
Inside Math: From the lucas&#39; theorem we can state that, $\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)}\equiv 1]} = 2^{f(i)}$ . [$f(i) = \text{ number of one in binary representation of } i$]
Suppose , $S(x) = \sum_{i=0}^{x}{\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)} \equiv 0]}}$ . Hence , our answer will be $S(R)-S(L-1)$</description>
      <content>&lt;h2 id=&#34;statement&#34;&gt;Statement:&lt;/h2&gt;
&lt;p&gt;In this problem you are asked to calculate : $\sum_{i=L}^{R}{\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)} \equiv 0]}}$ , for given $L$ and $R$.&lt;/p&gt;
&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;p&gt;From the lucas&#39; theorem we can state that, $\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)}\equiv 1]} = 2^{f(i)}$ . [$f(i) = \text{ number of one in binary representation of } i$]&lt;/p&gt;
&lt;p&gt;Suppose , $S(x) = \sum_{i=0}^{x}{\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)} \equiv 0]}}$ . Hence , our answer will be $S(R)-S(L-1)$&lt;/p&gt;
&lt;p&gt;Now,
\begin{align}
S(x) &amp;amp; = \sum_{i=0}^{x}{\sum_{j=0}^{i}{[\binom{i}{j} \text{ (mod 2)} \equiv 0]}} \newline
&amp;amp; = \sum_{i=0}^{x}{(i+1) - 2^{f(i)}} \newline
&amp;amp; = \sum_{i=0}^{x}{(i+1)} - \sum_{i=0}^{x}{2^{f(i)}} \newline
&amp;amp; = \frac{(i+1)\times (i+2)}{2} - \sum_{i=0}^{x}{2^{f(i)}} \newline
\end{align}&lt;/p&gt;
&lt;p&gt;Now the challenge is to calculate $\sum_{i=0}^{x}{2^{f(i)}}$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to do this ?&lt;/strong&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
&lt;b&gt;Hint&lt;/b&gt;
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;ul&gt;
&lt;li&gt;digit dp&lt;/li&gt;
&lt;li&gt;divide and conquer&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;divide-and-conquer-solution&#34;&gt;Divide and Conquer solution:&lt;/h2&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
&lt;b&gt;Hint for divide and conquer&lt;/b&gt;
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
print the values of $f(0),f(1),f(2),&amp;hellip;f(10)&amp;hellip;$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;With some observation/math/googling we can find out that for any number $2^{k} - 1$ , $S(2^{k}-1) = 3^{k}$&lt;/p&gt;
&lt;p&gt;Again , for any number $x$ , if $i$ is maximum number such that $2^{i}-1 &amp;lt; x$ , then we can write $S(x) = S(2^{i}-1) + 2 \times S(x - 2^i)$&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Complex Tashreef : (Divide and Conquer)&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/toph\/complex-tashreef.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;p&gt;To avoid &lt;strong&gt;TLE&lt;/strong&gt; precalculate all values of $S(2^{i} - 1)$ and return them in function $S(n)$ directly.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://brilliant.org/wiki/lucas-theorem/&#34;&gt;Lucas&#39; Theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oeis.org/A001316&#34;&gt;OEIS A001316&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://toph.co/p/complex-tashreef&#34;&gt;Complex Tashreef - Intra AUST Programming Contest, Spring 2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Staircases - Timus 1017</title>
      <link>https://st3inum.github.io/posts/timus-1017/</link>
      <pubDate>Fri, 23 Apr 2021 00:28:55 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/timus-1017/</guid>
      <description>Maintain a function with current position(column) of the staircases($i$) , number of remaining block($r$) , number of block we have used for the last column($l$).
for $i^{th}$ position we can use $x\in [1,min(r,l-1)]$ block in this step.
But if we use dp table of $500 \times 500 \times 500$ size it will cause you MLE.
Notice that, we dont need position($i$) here, only things we need here if $i$ is greater than $1$ or not.</description>
      <content>&lt;p&gt;Maintain a function with current position(column) of the staircases($i$) , number of remaining block($r$) , number of block we have used for the last column($l$).&lt;/p&gt;
&lt;p&gt;for $i^{th}$ position we can use $x\in [1,min(r,l-1)]$ block in this step.&lt;/p&gt;
&lt;p&gt;But if we use dp table of $500 \times 500 \times 500$ size it will cause you MLE.&lt;/p&gt;
&lt;p&gt;Notice that, we dont need position($i$) here, only things we need here if $i$ is greater than $1$ or not. Hence we can minimise $i$ with $2$. Then size of our dp table will be $2 \times 500 \times 500$ .&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;code: 1&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/timus\/1017.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;p&gt;But actually we don&amp;rsquo;t need $i$ for this code. But Why?

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
spoiler
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;pre&gt;&lt;code&gt;try it yourself.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;The code will be like this:



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;code: 2&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code2&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/timus\/1017(alter).cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code2&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;

&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1017&#34;&gt;Timus - 1017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Alphabet - Codeforces - 101201a</title>
      <link>https://st3inum.github.io/posts/codeforces-101201a/</link>
      <pubDate>Thu, 22 Apr 2021 21:55:00 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/codeforces-101201a/</guid>
      <description>Hint: Maintain a function with current position of the string that can we take and number of last character that we have taken as state.
We have three option for transition:
  take current charecter as the new character of our abcdef... string [if it is possible], and go to the next position of our given string.
  ignore the current character , and go to the next position of our given string.</description>
      <content>&lt;h2 id=&#34;hint&#34;&gt;Hint:&lt;/h2&gt;
&lt;p&gt;Maintain a function with current position of the string that can we take and number of last character that we have taken as state.&lt;/p&gt;
&lt;p&gt;We have three option for transition:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;take current charecter as the new character of our &lt;code&gt;abcdef...&lt;/code&gt; string [if it is possible], and go to the next position of our given string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ignore the current character , and go to the next position of our given string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;insert a new character as the new character of our &lt;code&gt;abcdef...&lt;/code&gt; string, and stay at the same position of our given string.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Saving all state in DP table is enough for this problem.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codeforces\/101201a.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/contest/1257/problem/G&#34;&gt;Codeforces - 1257G&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Divisors - UVA 294</title>
      <link>https://st3inum.github.io/posts/uva-294/</link>
      <pubDate>Thu, 22 Apr 2021 10:03:45 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/uva-294/</guid>
      <description>In this problem we will run a segmented sieve for [l,r]. In sieve we will maintain &amp;ldquo;number of divisor of $n$ which is smaller or equal than $\sqrt{n}$&amp;quot;.
For each, $i\in [1,\sqrt{r}]$ we will increase number of divisor of each multiple of $i$ in range $[max(l,i^2),r]$.
After the sieve we will multiply $2$ with each number of divisor, because if $i$ is a divisor of $n$ such that $i\le \sqrt{n}$ , we will have another divisor $\frac{n}{i} \ge \sqrt{n}$.</description>
      <content>&lt;p&gt;In this problem we will run a segmented sieve for [l,r]. In sieve we will maintain &lt;strong&gt;&amp;ldquo;number of divisor of $n$ which is smaller or equal than $\sqrt{n}$&amp;quot;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For each, $i\in [1,\sqrt{r}]$ we will increase number of divisor of each multiple of $i$ in range $[max(l,i^2),r]$.&lt;/p&gt;
&lt;p&gt;After the sieve we will multiply $2$ with each number of divisor, because if $i$ is a divisor of $n$ such that $i\le \sqrt{n}$ , we will have another divisor $\frac{n}{i} \ge \sqrt{n}$. [if n is a square number , we will subtract $1$ also after multiplication].&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/uva\/294.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://onlinejudge.org/external/2/294.pdf&#34;&gt;UVA - 294&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Prime Factor Love - Toph</title>
      <link>https://st3inum.github.io/posts/toph-prime-factor-love/</link>
      <pubDate>Thu, 22 Apr 2021 02:31:20 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/toph-prime-factor-love/</guid>
      <description>Problem Description:   $mod = 1000009$
  $ [p] = \begin{cases} 1 \text{ if $p$ is true} \newline 0 \text{ if $p$ is not true} \end{cases}$
  $f(n) = \sum_{i=2}^{n-1}{[i|n]i}$
  $S(n) = \sum_{i=1}^{n}{f(i)}$ for a given n
  You need to find , sum of all prime factor of S(n)%mod
  Inside Math:   We know , $\sigma_1(n) = \sum_{i=1}^{n}{[i|n]i}$
  $sum(n) = \sum_{i=1}^{n}{i}$</description>
      <content>&lt;h2 id=&#34;problem-description&#34;&gt;Problem Description:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$mod = 1000009$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$ [p] = \begin{cases} 1 \text{ if $p$ is true} \newline 0 \text{ if $p$ is not true} \end{cases}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$f(n) = \sum_{i=2}^{n-1}{[i|n]i}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$S(n) = \sum_{i=1}^{n}{f(i)}$ for a given n&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You need to find , sum of all prime factor of S(n)%mod&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;inside-math&#34;&gt;Inside Math:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We know , $\sigma_1(n) = \sum_{i=1}^{n}{[i|n]i}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$sum(n) = \sum_{i=1}^{n}{i}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$sum(l,r) = \sum_{i=l}^{r}{i}$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let assume , $ssod(n) = \sum_{i=1}^{n}{\sigma_1(i)}$ , ssod = sum of sum-of-divisor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can represent $S(n) = ssod(n) - sum(n) - n + [n&amp;gt;=1]$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now , if we can find $ssod(n)$ faster, we can solve the problem.&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=1}^{n}{\sigma_1(i)}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=1}^{n}{\sum_{j=1}^{i}{[j|i]j}}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=1}^{n}{\sum_{j=1}^{n}{[j|i]j}}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=j}^{n}{j \times \sum_{i=1}^{n}{[j|i]}}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow ssod(n) = \sum_{i=j}^{n}{j \times \lfloor \frac{n}{j} \rfloor}$&lt;/p&gt;
&lt;p&gt;Now there, might be $O(\sqrt{n})$ different values for $\lfloor \frac{n}{j} \rfloor$ [This is also known as &lt;a href=&#34;https://st3inum.github.io/posts/uva-11526/&#34;&gt;Harmonic lemma&lt;/a&gt;]. We will iterate over all such values of $\lfloor \frac{n}{j} \rfloor$ , and sum up there contribution. Thus we can calculate values for $ssod(n)$ in $O(\sqrt{n})$ and then for $S(n)$.&lt;/p&gt;
&lt;p&gt;For the second part , we will maintain a sieve for values $[0,mod)$ and precalculate sum of prime factor of all the number in the range.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/toph\/prime-factor-love.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;spoj---afs2&#34;&gt;SPOJ - AFS2&lt;/h2&gt;
&lt;p&gt;Pretty much same problem.



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;AFS2&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code2&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/spoj\/AFS2.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code2&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;

&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://toph.co/p/prime-factor-love&#34;&gt;Toph - Prime Factor Love&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.spoj.com/problems/AFS2/en/&#34;&gt;SPOJ - AFS2 - Amazing Factor Sequence (medium)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/blog/entry/53925&#34;&gt;Harmonic Lemma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Divisor Set - Codeforces - 1257g</title>
      <link>https://st3inum.github.io/posts/codeforces-1257g/</link>
      <pubDate>Wed, 21 Apr 2021 23:41:52 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/codeforces-1257g/</guid>
      <description> cpp     var xmlHttp = new XMLHttpRequest(); xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codeforces\/1257g.cpp&#39;, false ); xmlHttp.send( null ); var div = document.getElementById(&#39;code1&#39;); div.textContent = &#39;\n&#39;+xmlHttp.responseText;  Reference:  Codeforces - 1257G Codeforces Editorial OEIS A096825  </description>
      <content>


  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;script type=&#34;text/javascript&#34;&gt;
  var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( &#34;GET&#34;, &#39;https:\/\/raw.githubusercontent.com\/st3inum\/blog\/master\/codes\/codeforces\/1257g.cpp&#39;, false ); 
    xmlHttp.send( null );
    var div = document.getElementById(&#39;code1&#39;);
    div.textContent = &#39;\n&#39;+xmlHttp.responseText;
    
    
&lt;/script&gt;


&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/contest/1257/problem/G&#34;&gt;Codeforces - 1257G&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/blog/entry/71434&#34;&gt;Codeforces Editorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oeis.org/A096825&#34;&gt;OEIS A096825&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Modular Arithmetic: Introductory Problems</title>
      <link>https://st3inum.github.io/posts/introductory-problems/</link>
      <pubDate>Wed, 21 Apr 2021 03:26:08 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/introductory-problems/</guid>
      <description>এই পোস্টে আমরা কিছু প্রব্লেম নিয়ে আলোচনা করবো । সবাইকে অনুরোধ করবো কোন সমস্যার সমাধান / হিন্ট দেখার আগে যথেষ্ট সময় দেওয়ার । তারপর না পারলে সমাধান / হিন্ট দেখতে পারেন । এখানে শেষের দিকে কিছু প্রোগ্রামিং রিলেটেড সমস্যা থাকবে । কোন প্রবলেম দেখে কাউকে বিচলিত না হওয়ার জন্য অনুরোধ করবো । কেউ যদি নিতান্ত কোন সমস্যায় আটকে যান , তাহলে ঐ সমস্যাটা স্কিপ করে পরবর্তী সমস্যাগুলো দেখার অনুরোধ করবো ।</description>
      <content>&lt;p&gt;এই পোস্টে আমরা কিছু প্রব্লেম নিয়ে আলোচনা করবো । সবাইকে অনুরোধ করবো কোন সমস্যার সমাধান / হিন্ট দেখার আগে যথেষ্ট সময় দেওয়ার । তারপর না পারলে সমাধান / হিন্ট দেখতে পারেন । এখানে শেষের দিকে কিছু প্রোগ্রামিং রিলেটেড সমস্যা থাকবে । কোন প্রবলেম দেখে কাউকে বিচলিত না হওয়ার জন্য অনুরোধ করবো । কেউ যদি নিতান্ত কোন সমস্যায় আটকে যান , তাহলে ঐ সমস্যাটা স্কিপ করে পরবর্তী সমস্যাগুলো দেখার অনুরোধ করবো ।&lt;/p&gt;
&lt;h2 id=&#34;some-mathematical-problems&#34;&gt;Some mathematical problems:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$16017020$ কে $4$ দিয়ে ভাগ করলে ভাগশেষ কত থাকবে ?
&lt;strong&gt;সোর্সঃ BDMO regional 2018&lt;/strong&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
hint
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
.
বিভাজ্যতার নিয়ম
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;পরপর চারটি সংখ্যার যোগফলকে $4$ দিয়ে ভাগ করলে ভাগশেষ কত হবে ?
&lt;strong&gt;সোর্সঃ BDMO regional 2016&lt;/strong&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
hint
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
.
কবুতরের খোপের নীতি(pigeonhole principle) + Residue class
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;দুইটি সংখ্যার যোগফল $12$ দিয়ে বিভাজ্য । সংখ্যা দুইটির বিয়োগফলকে $2$ দিয়ে ভাগ করলে ভাগশেষ কত থাকে?
&lt;strong&gt;সোর্সঃ BDMO regional 2018&lt;/strong&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
solution
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
.
মনে করি সংখ্যা দুইটি হল $a$ এবং $b$।
অর্থাৎ $a+b\equiv 0 \text{ (mod 12)}$
$\Longrightarrow a+b = 12k$
$\Longrightarrow a-b = 12k-2b$
$\Longrightarrow a-b = 2(6k-b)$
$\Longrightarrow a-b \equiv 2(6k-b) \text{ (mod 2)}$
$\Longrightarrow \boxed{a-b \equiv 0 \text{ (mod 2)}}$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$11+12+13+14&amp;hellip;..+2019= S$
What will be the remainder when dived by $100$?

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
solution
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
.
$s=(1+2+3+&amp;hellip;+2019)-(1+2+3+&amp;hellip;+10)$
$s=\frac{2019\times 2020}{2}-\frac{10\times 11}{2}$
$s=2019\times 1010-5\times 11$
$s \equiv 2019\times 1010-5\times 11 \text{ (mod 100)}$
$s \equiv 19\times 10-5\times 11 \text{ (mod 100)}$
$s \equiv 190-55 \text{ (mod 100)}$
$s \equiv 135 \text{ (mod 100)}$
$s \equiv \boxed{35} \text{ (mod 100)}$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$s=2016-2015+2014-2013+&amp;hellip;+4-3+2-1$
$s$ কে $4$ দিয়ে ভাগ করলে ভাগশেষ কত হবে ?
&lt;strong&gt;সোর্সঃ BDMO regional 2018&lt;/strong&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
hint
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
.
পরপর দুইটি সংখ্যা নিয়ে জোড়া করে হিসাব করলেই হয়ে যায় । এই সমস্যায় মডুলার অ্যারিথমেটিক তেমন কোন কাজে লাগে না ।
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$s=2^{2}+4^{2}+8^{2}+&amp;hellip;+512^{2}+1024^{2}$
$s$ এর শেষ অংক কত?
&lt;strong&gt;সোর্সঃ BDMO regional 2016&lt;/strong&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
hint
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
.
এখানে আসলে আমাদের $s \text{ (mod 10)}$ বের করতে হবে ।
আমাদের পদগুলোর সাধরন রূপ হল $2^{2x}$ [যেখানে $x\ge 1$ এবং $x$ পূর্ন সংখ্যা]
$2^{2x}=2^{2(x-1)+2}=2^{2(x-1)}\times 2^{2}=2^{2(x-1)}\times 4$
অর্থাৎ , কোন পদের মডুলো মান হবে তার আগের মডুলো মানের $4$ গুন ।
প্রথম পদ , $2^2\equiv 4 \text{ (mod 10)}$
দ্বিতীয় পদ , $2^4\equiv 4 \times 4 \equiv 6 \text{ (mod 10)}$
তৃতীয় পদ , $2^6\equiv 6 \times 4 \equiv 4 \text{ (mod 10)}$
&amp;hellip;
এভাবে $4$ আর $6$ আস্তে থাকবে চক্রাকারে । এখান থেকে পরপর দুইটি পদ নিয়ে হিসাব করলেই হয়ে যাবে ।
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;একটি গোল টেবিলে $10$ টি চেয়ারে দশজন লোক বসে আছে । চেয়ারগুলো ঘড়ির কাটার ঘুর্ননের দিকে $0,1,2,&amp;hellip;,9$ সংখ্যা দিয়ে ক্রমানুসারে চিহ্নিত করা । $0$ চিহ্নিত চেয়ারে থাকা লোকটির কাছে একটি বল আছে এবং বলটিকে এখন ঘড়ির কাটার ঘূর্ননের দিকে একজনের কাছে থেকে অপরজনের কাছে পাঠানো হবে । প্রথম ধাপে বলটি $1^{1}$ সংখ্যক চেয়ার ঘুরে $1$ চিহ্নিত চেয়ারে যায় । দ্বিতীয় ধাপে সেখান থেকে আরও $2^{2}$ সংখ্যক চেয়ার ঘুরে $5$ চিহ্নিত চেয়ারে যায় । তৃতীয় ধাপে বলটি সেখান থেকে আরও $3^{3}$ সংখ্যক চেয়ার ঘুরে $2$ চিহ্নিত চেয়ারে যায় । এভাবে $2020$ তম ধাপে বলটি কত নাম্বার চেয়ারে থাকবে ?
&lt;strong&gt;সোর্সঃ BDMO regional 2017&lt;/strong&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
hint
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
.
এখানে আসলে আমাদের $\sum_{i=1}^{2020}{i^i} \text{ (mod 10)}$ বের করতে হবে ।
সহজ ভাষায় $1^1+2^2+3^+&amp;hellip;+2020^{2020} \text{ (mod 10)}$  বের করতে হবে ।
চক্র(cycle) বের করে সহজেই এই সমস্যাটির সমাধান করা যায় ।
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$c=2^{1}+2^{2}+2^{3}+2^{4}+&amp;hellip;+2^{2017}+2^{2018}$
$c$ কে $3$ দিয়ে ভাগ করলে ভাগশেষ কত থাকবে ?
&lt;strong&gt;সোর্সঃ BDMO regional 2018&lt;/strong&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
hint
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
.
$a^p \text{ (mod m)}$ এরকম আকারের যেকোনো সংখ্যার একটি বৈশিষ্ট্য হল $a,m$ এর ফিক্স মানের জন্য $p$ এর মান বাড়ালে চক্র(cycle) পাওয়া যায়।&lt;br /&gt;
এই সমস্যার ক্ষেত্রে আমরা $2,1,2,1,&amp;hellip;$ এরকম চক্র পাবো , এখান থেকে পরপর দুইটি মানের জোড়া নিয়ে হিসাব করলেই হয়ে যাবে ।
এই সমস্যাটি গুণোত্তর ধারা (geometric series) +  মডুলার অ্যারিথমেটিক দিয়েও করা যায় ।
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A = 1234&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;100 (Using all number from 1 to 100 conjecutively) What will be the remainder if A is divide by 9?
&lt;strong&gt;সোর্সঃ KUET math club , mothly challenge - 1&lt;/strong&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
solution
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;p&gt;.
&lt;strong&gt;Bonus question&lt;/strong&gt;:  If we concatenate n number ($a_1,a_2,a_3,&amp;hellip;a_n$). And thus get number &lt;code&gt;M&lt;/code&gt; then prove that $M\equiv \sum_{i=1}^{n}{a_i}\text{ (mod 9)}$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;proof&lt;/strong&gt; :&lt;/p&gt;
&lt;p&gt;if the length of the $i_{th}$ number is $p_{i}$ then we can write,&lt;/p&gt;
&lt;p&gt;$M=\sum_{i=1}^{n}{a_{i}\times 10^{\sum_{j=i+1}^{n}{p_{j}}}}$&lt;/p&gt;
&lt;p&gt;in short we can write , $M=\sum_{i=1}^{n}{10^{x_i}a_i}$&lt;/p&gt;
&lt;p&gt;where, $x_i = \sum_{j=i+1}^{n}{p_{j}}$&lt;/p&gt;
&lt;p&gt;as $10^x\equiv 1 \text{ (mod 9)}$&lt;/p&gt;
&lt;p&gt;hence , $10^x a\equiv a \text{ (mod 9)}$&lt;/p&gt;
&lt;p&gt;$\therefore M\equiv\sum_{i=1}^{n}{10^{x_i}a_i}\equiv\sum_{i=1}^{n}{a_i} \text{ (mod 9)}$&lt;/p&gt;
&lt;p&gt;Now in this problem we can say that $A\equiv\sum_{i=1}^{100}{i} \text{ (mod 9)}$&lt;/p&gt;
&lt;p&gt;$\Longrightarrow A\equiv 100 \text{ (mod 9)}$ [as $\sum_{i=1}^{99}{i} \equiv 0 \text{ (mod 9)}$]&lt;/p&gt;
&lt;p&gt;$\Longrightarrow A\equiv \textcolor{red}{\boxed{1}} \text{ (mod 9)}$&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$122333444455555666666&amp;hellip;10000000001000000000&amp;hellip;1000000000$ কে $3$ দিয়ে ভাগ করলে ভাগশেষ কত থাকবে?
&lt;strong&gt;সোর্সঃ BDMO regional 2015&lt;/strong&gt;

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
hint
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;আগের সমস্যার সমাধান দেখে নিজে চেষ্টা করো ।&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;some-programming-related-problems&#34;&gt;Some programming related problems:&lt;/h2&gt;
&lt;p&gt;অনেক হয়ে গেলো শুধুমাত্র ম্যাথ নিয়ে সমস্যা । এখন কিছু প্রোগ্রামিং নিয়েও সমস্যা দেখা যাক ।&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;আমাদের $3$ টা পূর্নসংখ্যা দেওয়া আছে $p,q,m$ যেখানে $0\le p,q \le 10^9$ এবং $1\le m \le 10^9$ । আমাদেরকে $pq \text{ (mod m)}$ এর মান প্রিন্ট করতে হবে ।

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
hint
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;$p,q$ যেহেতু $10^9$ পর্যন্ত হতে পারে , তাই এদের গুণফল $10^{18}$ পর্যন্ত হয়ে যেতে পারে । তাই এই ভ্যারিয়েবল গুলো &lt;code&gt;long long&lt;/code&gt; টাইপের নিতে তবে ( অথবা &lt;code&gt;long long&lt;/code&gt; এ টাইপকাস্ট করে নিতে হবে )&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;




  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code1&#34;&gt;
int main() {
  long long p, q;
  int m;
  scanf(&amp;#34;%lld %lld %d&amp;#34;, &amp;amp;p, &amp;amp;q, &amp;amp;m);
  printf(&amp;#34;%lld\n&amp;#34;, (p * q) % m);
  return 0;
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;এখন আগের প্রবলেমেই রেঞ্জটা একটু চেঞ্জ করে দিলে কেমন হয়? $0\le p,q \le 10^{18}$ এবং $1\le m \le 10^9$

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
hint
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;$p,q$ যেহেতু $10^{18}$ পর্যন্ত হতে পারে , তাই এটি আগের পদ্ধতিতে সল্ভ করা যাবে না , কাড়ন  এদের গুণফল $10^{36}$ পর্যন্ত হয়ে যেতে পারে এবং এই রেঞ্জের কোন ভ্যারিয়েবল c++ এ নাই।
যদি $p\equiv a \text{ (mod m)}$ এবং $q\equiv b \text{ (mod m)}$ হয় , তাহলে আমরা বলতে পারি $pq\equiv ab \text{ (mod m)} \Longrightarrow pq\equiv {(p\text{ (mod m)})\times(q\text{ (mod m)})} \text{ (mod m)}$&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;




  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;cpp&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-cpp&#34; &gt;&lt;code id=&#34;code2&#34;&gt;
int main() {
  long long p, q;
  int m;
  scanf(&amp;#34;%lld %lld %d&amp;#34;, &amp;amp;p, &amp;amp;q, &amp;amp;m);
  p%=m;
  q%=m;
  printf(&amp;#34;%lld\n&amp;#34;, (p * q) % m);
  return 0;
}&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://matholympiad.org.bd/resources/all-questions&#34;&gt;BDMO questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Modular Arithmetic: Introduction</title>
      <link>https://st3inum.github.io/posts/intro-to-modular-arithmetic/</link>
      <pubDate>Tue, 20 Apr 2021 03:26:08 +0600</pubDate>
      
      <guid>https://st3inum.github.io/posts/intro-to-modular-arithmetic/</guid>
      <description>মডুলার অ্যারিথমেটিক নিয়ে পড়ার আগে আমরা কিছু জিনিস রিক্যাপ করে নেই , যেগুলা আমরা ক্লাস ফাইভে পড়ে এসেছি ।
ভাজ্য = ভাজক × ভাগফল + ভাগশেষ বা, Dividend = Divisor × Quotient + Remainder
অনেকের যদি কোনটা কি জিনিস মনে না থাকে তাহলে পুরানো বইয়ের পাতা উলটে দেখতে পার , আর গুগল মামা তো আছেই ।
এবার অনেকর মনে প্রশ্ন আসবে , অমুক প্রবলেম তো সহজেই পাটিগণিত / সাধারণ নিয়মে সল্ভ করে ফেলা যায় , তাহলে এসব ম্যাথ করার জন্য মডুলার অ্যারিথমেটিক কেন শিখবো?</description>
      <content>&lt;p&gt;মডুলার অ্যারিথমেটিক নিয়ে পড়ার আগে আমরা কিছু জিনিস রিক্যাপ করে নেই , যেগুলা আমরা ক্লাস ফাইভে পড়ে এসেছি ।&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ভাজ্য = ভাজক × ভাগফল + ভাগশেষ&lt;/code&gt; বা, &lt;code&gt;Dividend = Divisor × Quotient + Remainder&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;অনেকের যদি কোনটা কি জিনিস মনে না থাকে তাহলে পুরানো বইয়ের পাতা উলটে দেখতে পার , আর &lt;a href=&#34;google.com&#34;&gt;গুগল&lt;/a&gt; মামা তো আছেই ।&lt;/p&gt;
&lt;p&gt;এবার অনেকর মনে প্রশ্ন আসবে , অমুক প্রবলেম তো সহজেই পাটিগণিত / সাধারণ নিয়মে সল্ভ করে  ফেলা যায় , তাহলে এসব ম্যাথ করার জন্য মডুলার অ্যারিথমেটিক কেন শিখবো? তার উপর এটা তো একটা কঠিন টপিক ।&lt;/p&gt;
&lt;p&gt;তাদের জন্য বলে রাখা, মডুলার অ্যারিথমেটিক হল এসব সাধারণ নিয়মগুলোর একটা কম্প্যাক্ট ফর্ম । তাই এভাবে করলে সহজেই অনেক প্রবলেম সল্ভ করে ফেলা যায় । যেগুলো কিনা সাধারণ ভাবে করলে অনেক বড় হয়ে যেত ।  আর সত্যি কথা বলতে মানুষকে কোন ম্যাথের সলিউশন বুঝাতে গেলে বেশি লেখা দেখলে ভয় পেয়ে যায়। কিন্তু মডুলার অ্যারিথমেটিক দিয়ে সল্ভ করলে কয়েক লাইনে হয়ে যায় বলে তারা ভয় পায় না। (just kidding :v​ )&lt;/p&gt;
&lt;h2 id=&#34;definition&#34;&gt;Definition:&lt;/h2&gt;
&lt;p&gt;আমরা অনেক সময় দেখে থাকি $a \text{ (mod b)}$ । এর মানে কি? সহজ করে বলতে গেলে এর মানে হল &lt;code&gt;a&lt;/code&gt; কে &lt;code&gt;b&lt;/code&gt; দিয়ে ভাগ করলে যেই ভাগশেষ থাকবে সেই সংখ্যাটা ।  উদাহরণস্বরূপ $5 \text{ (mod 3)}=2$&lt;/p&gt;
&lt;p&gt;এখানে &lt;code&gt;mod&lt;/code&gt; সাইনটা আসলে &lt;code&gt;modulo(মডুলো)&lt;/code&gt; শব্দের সংক্ষিপ্ত রূপ ।&lt;/p&gt;
&lt;p&gt;আমরা আবার অনেকসময় দেখে থাকি $a\equiv b \text{ (mod m)}$ এর মানেই বা কি?&lt;/p&gt;
&lt;p&gt;কখনো যদি $a \text{ (mod m)}=b \text{ (mod m)}$ হয় , তখন আমরা সংক্ষেপে লিখতে পারি $a\equiv b \text{ (mod m)}$ । এবং এটাকে পড়তে হয় &lt;code&gt;&amp;quot;a is congruent to b modulo m&amp;quot;&lt;/code&gt; এভাবে ।&lt;/p&gt;
&lt;p&gt;এটাকে আমরা আরও একভাবে সংজ্ঞায়িত করতে পারি , যদি $(a-b)$ , $m$ দিয়ে নিঃশেষে ভাগ যায়, তাহলে আমরা লিখতে পারি $a\equiv b \text{ (mod m)}$ ।&lt;/p&gt;
&lt;p&gt;আসলে দুইটা সংজ্ঞাই একই , একটু চিন্তা করলে বুঝতে পারবা।&lt;/p&gt;
&lt;h2 id=&#34;properties&#34;&gt;Properties:&lt;/h2&gt;
&lt;p&gt;আমরা কোন সমীকরণের দুইপাশে যেমন একই সংখ্যা দিয়ে যোগ , বিয়োগ, গুন  করতে পারি ঠিক তেমনি আমরা মডুলার অ্যারিথমেটিকেও উভয় দিকে একই সংখ্যা দিয়ে যোগ বিয়োগ গুন করতে পারি । [ &lt;em&gt;&lt;strong&gt;বিদ্রঃ উভয় দিকে একই সংখ্যা দিয়ে ভাগ করতে পারি না ।&lt;/strong&gt;&lt;/em&gt; ]&lt;/p&gt;
&lt;p&gt;যেমন আমাদের রাশিটি যদি হয় $a\equiv b \text{ (mod m)}$ তাহলে কোন পূর্নসংখ্যা $k$ এর জন্য আমরা লিখতে পারি&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$a +k\equiv b+k \text{ (mod m)}$

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
proof
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
.
$a\equiv b \text{ (mod m)}$ হলে আমি বলতে পারি $a-b=mp$
যেখানে &lt;code&gt;p&lt;/code&gt; হল $(a-b)$ কে &lt;code&gt;m&lt;/code&gt; দিয়ে ভাগ করলে যেই ভাগফল থাকবে সেইটা ( ২য় সংজ্ঞা দিয়ে চিন্তা কর)
এখন ,
$a-b=mp$
= $(a+k)-(b+k)=mp$
তারমানে বলতে পারি , $a +k\equiv b+k \text{ (mod m)}$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$a-k\equiv b-k \text{ (mod m)}$

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
proof
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;pre&gt;&lt;code&gt;নিজে চেষ্টা কর।
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$a\times k\equiv b\times k \text{ (mod m)}$

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
proof
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;pre&gt;&lt;code&gt;নিজে চেষ্টা কর।
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;আরও কিছু বৈশিষ্ট্য &amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$a \equiv b \text{ (mod m)}$ এবং $p \equiv q \text{ (mod m)}$ হলে $a+p \equiv b+q \text{ (mod m)}$&lt;/li&gt;
&lt;li&gt;$a \equiv b \text{ (mod m)}$ এবং $p \equiv q \text{ (mod m)}$ হলে $a-p \equiv b-q \text{ (mod m)}$&lt;/li&gt;
&lt;li&gt;$a \equiv b \text{ (mod m)}$ এবং $p \equiv q \text{ (mod m)}$ হলে $a\times p \equiv b\times q \text{ (mod m)}$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;residue-class&#34;&gt;Residue class:&lt;/h2&gt;
&lt;p&gt;কোন ধনাত্মক পূর্নসংখ্যা , $n$ দিয়ে অন্য যেকোনো পূর্নসংখ্যাকে ভাগ করলে ভাগশেষের সম্ভাব্য সকল সংখ্যাকে নিয়ে যে সেট হয় , তাকে &lt;a href=&#34;https://artofproblemsolving.com/wiki/index.php/Residue_class&#34;&gt;রেসিডিউ ক্লাস&lt;/a&gt; বলে ।  সহজ ভাবে বললে , কোন পূর্ন সংখ্যা , $n$ দিয়ে অন্য যেকোনো পূর্নসংখ্যাকে ভাগ করি না কেন , ভাগশেষ অবশ্যই $0$ থেকে $n-1$ এর মধ্যে হবে ( $0$ এবং $n-1$ সহ ) । যেমনঃ $5$ দিয়ে কোন সংখ্যাকে ভাগ করলে ভাগশেষ হতে পারে ${0,1,2,3,4}$ । তাই $5$ এর রেসিডিউ ক্লাস হল ${0,1,2,3,4}$ ।&lt;/p&gt;
&lt;h2 id=&#34;divisibility-rule&#34;&gt;Divisibility Rule:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$2$ &lt;strong&gt;দিয়ে নিঃশেষে বিভাজ্য হওয়ার নিয়মঃ&lt;/strong&gt;
কোন সংখ্যার শেষ অংকটি যদি $2$ দিয়ে ভাগ যায় , অর্থাৎ $0,2,4,6,8$ এর মধ্যে যেকোনোটা হয় । তাহলে সংখ্যাটি $2$ দিয়ে বিভাজ্য ।

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
proof
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
.
মনে করি সংখ্যাটি $n=10x+p$ । অর্থাৎ এর শেষ অংকটি হল $p$ ।
তাহলে আমরা বলতে পারি ,
$n\equiv 10x+p \text{ (mod 2)}$
$\Longrightarrow n\equiv 0+p \text{ (mod 2)}$
$\Longrightarrow \boxed{n\equiv p \text{ (mod 2)}}$
অর্থাৎ $p$ ( শেষ অংক) কে $2$ দিয়ে ভাগ করলে যেই ভাগশেষ থাকবে , $n$ কে $2$ দিয়ে ভাগ করলেও একই ভাগশেষ থাকবে ।
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$3$ &lt;strong&gt;দিয়ে নিঃশেষে বিভাজ্য হওয়ার নিয়মঃ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;কোন সংখ্যার অংকগুলোর যোগফল যদি $3$ দিয়ে ভাগ যায়, তাহলে সংখ্যাটিও $3$ দিয়ে ভাগ যাবে ।

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
proof
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
&lt;p&gt;.
মনে করি সংখ্যাটি  $n=d_{0}+10d_{1}+100d_{2}+&amp;hellip;+10^{k-1}d_{k-1}$&lt;/p&gt;
&lt;p&gt;সংক্ষেপে বললে , $n=\sum_{i=0}^{k-1}{10^{i}d_{i}}$
এখানে $n$ হল $k$ অংকের একটি সংখ্যা , এবং এর অংকগুলো হল , $d_{0},d_{1},d_{2},&amp;hellip;,d_{k-1}$। যেখানে $d_{0}$ হল একক স্থানীয় অংক, $d_{1}$ হল দশক স্থানীয় অংক , &amp;hellip; ।
এখন , $10^p\equiv10\times 10 \times &amp;hellip; \times 10 \text{ (mod 3)}$ [মোট $p$ সংখ্যক $10$]
$\Longrightarrow 10^{p}\equiv 1\times 1\times 1 \times &amp;hellip; \times 1 \text{ (mod 3)} \equiv 1 \text{ (mod 3)}$&lt;/p&gt;
&lt;p&gt;অর্থাৎ , $n\equiv d_{0}+10d_{1}+100d_{2}+&amp;hellip;+10^{k-1}d_{k-1}\text{ (mod 3)}$
$\Longrightarrow \boxed{n\equiv d_{0}+d_{1}+d_{2}+&amp;hellip;+10d_{k-1} \text{ (mod 3)}}$&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$4$ &lt;strong&gt;দিয়ে নিঃশেষে বিভাজ্য হওয়ার নিয়মঃ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;কোন সংখ্যার শেষ দুই অংক নিয়ে গঠিত সংখ্যা যদি $4$ দিয়ে ভাগ যায়, তাহলে সংখ্যাটিও $4$ দিয়ে ভাগ যাবে ।

&lt;div class=&#34;spoiler panel panel-default&#34;&gt;
&lt;div class=&#39;spoiler_block&#39;&gt;
      
        
      
&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-in spoiler_block_show&#39;&gt;
proof
&lt;/a&gt;

&lt;a href=&#39;#&#39; class=&#39;spoiler-block-icon spoiler-block-icon-zoom-out spoiler_block_hide&#39; style=&#39;display: none;&#39;&gt;
click to hide
&lt;/a&gt;

&lt;div class=&#39;spoiler_block_content&#39; style=&#39;display: none;&#39;&gt;
.
মনে করি সংখ্যাটি  $n=d_{0}+10d_{1}+100d_{2}+&amp;hellip;+10^{k-1}d_{k-1}$
$\Longrightarrow n\equiv d_{0}+10d_{1}+100d_{2}+&amp;hellip;+10^{k-1}d_{k-1}\text{ (mod 4)}$
$\Longrightarrow \boxed{n\equiv d_{0}+10d_{1}\text{ (mod 4)}}$
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&amp;hellip;চলবে&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://brilliant.org/wiki/modular-arithmetic/&#34;&gt;Brilliant Wiki&lt;/a&gt; (আমি যখন ব্রিলিয়ান্ট উইকি খুললাম তখন অবাক হয়ে গেলাম এটা দেখে যে সংজ্ঞার অংশ দুই জায়গায় ই একই :v )&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Modulo_operation&#34;&gt;মডুলো অপারেশন - উইকিপিডিয়া&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Divisibility_rule&#34;&gt;Divisibility rule from wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brilliant.org/wiki/modular-arithmetic-misconceptions/&#34;&gt;Some Misconception about modulo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
